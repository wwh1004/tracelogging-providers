ProviderNames:
	Microsoft.Windows.Wil.FeatureLogging
	Microsoft.Windows.WindowsErrorReporting
	Microsoft.Windows.Utc.ReentrancyTest
	Microsoft.Windows.Utc.WatchdogProvider
	Microsoft.Windows.TelemetryViewer
	TelClientSyntheticAggregation
	Microsoft.Windows.DiagTrack
	Microsoft.Windows.DiagTrack.XML
	UtcTelemetryAssertDump
	Microsoft.Windows.Sentinels
	Microsoft.Windows.DeviceDelete



**** Events *****
FeatureError(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	HRESULT hr,
	ANSISTRING file,
	UINT16 lineNumber,
	ANSISTRING module,
	ANSISTRING process,
	ANSISTRING originFile,
	UINT16 originLineNumber,
	ANSISTRING originModule,
	ANSISTRING originName,
	ANSISTRING message,
	ANSISTRING callerModule,
	UINT32 callerReturnAddressOffset,
	ANSISTRING originCallerModule,
	UINT32 originCallerReturnAddressOffset
	);

EnabledFeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

FallbackError(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FeatureVariantUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 variantKind,
	UINT8 variant,
	UINT64 addend
	);

ServiceMain_HandleStopEvent(
	VOID
	);

ServiceMain_DllMain_Unregister(
	VOID
	);

ServiceMain_DllMain_Register(
	VOID
	);

Utils_SetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	UINT64 Value,
	INT32 HRESULT
	);

SevilleBandwidthMonitor_DailyUploadQuotaPublish(
	UINT64 BytesUploadedSoFar,
	UINT64 BytesAllowed,
	UINT32 PercentageUsed,
	UINT32 NewTier,
	UINT32 OldTier
	);

Utils_SetRegistryKey(
	INT32 hKey,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	BINARY Value,
	UINT32 ValueSize,
	INT32 HRESULT
	);

BandwidthMonitor_ReportingSucessfulUpload(
	UINT64 StartOfDay,
	UINT32 LastUploadedIndex,
	UINT64 UploadSize
	);

BandwidthMonitor_CanUpload(
	UINT64 StartOfDay,
	UINT32 LastUploadedIndex,
	UINT64 BytesAllowed,
	UINT64 BytesUploadedSoFar,
	UINT64 UploadRequestSizeInBytes,
	BOOLEAN CanUpload
	);

BandwidthMonitor_FutureStartOfDay(
	UINT64 StartOfDay,
	UINT64 CurrentTime
	);

BandwidthMonitor_BytesUploadedSoFar(
	UINT64 StartOfDay,
	UINT32 LastUploadedIndex,
	UINT64 BytesUploadedSoFar
	);

BandwidthMonitor_UpdateMovingWindowToCurrentDay(
	UINT64 StartOfDay,
	UINT32 LastUploadIndex,
	UINT64 CurrentTime
	);

BandwidthMonitor_UpdateMovingWindowToCurrentDay(
	UINT64 StartOfDay,
	UINT32 LastUploadIndex,
	UINT64 CurrentTime
	);

AsimovEndpointConfig_UpdatedEndpointTypeStates(
	UNICODESTRING Region
	);

AsimovEndpointConfig_EndpointRegionChanged_FromNoRegion(
	COUNTEDSTRING NewRegion,
	COUNTEDSTRING NewNormalUrl
	);

AsimovEndpointConfig_NewRegionNotConfigured(
	COUNTEDSTRING OldRegion,
	COUNTEDSTRING NewRegion
	);

AsimovEndpointConfig_EndpointRegionChanged(
	COUNTEDSTRING OldRegion,
	COUNTEDSTRING OldNormalUrl,
	COUNTEDSTRING NewRegion,
	COUNTEDSTRING NewNormalUrl
	);

EnterpriseData_Get_IsProcessorMode(
	UINT64 m_programFlags,
	BOOL32 m_isAadJoined,
	BOOL32 m_isSettingsReceived,
	BOOL32 isProcessorModeAllowed,
	BOOL32 isProcessorMode
	);

EnterpriseData_Get_IsProcessorSettingsRecieved(
	UINT64 m_isSettingsReceived,
	BOOL32 IsSettingsStillValid
	);

AsimovEndpointConfig_EndpointRegionChanged_M365(
	BOOLEAN OldCommercialIdSet,
	BOOLEAN NewCommercialIdSet
	);

AsimovEndpointConfig_EventTargetUrl_0(
	UNICODESTRING CurrentEndpointRegion,
	UINT8 UploadEndpointType,
	UNICODESTRING ServerUrl
	);

Utils_CannotReadTestHookDueToPpl(
	VOID
	);

Utils_GetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	UINT32 Value,
	INT32 HRESULT
	);

Utils_GetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	UINT64 Value,
	INT32 HRESULT
	);

Utils_GetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	BINARY Value,
	UINT32 ValueSize,
	INT32 HRESULT
	);

AsimovUploadQueue_ForceUpload_CreatingForceWork(
	INT8 WorkDefLatency,
	COUNTEDSTRING TenantIKey,
	UINT64 PTP_WORK,
	UINT64 AsimovUploadWorkItemAddr
	);

AsimovUploadQueue_ArmTimersIfStorageBuffersHaveData(
	INT8 Latency,
	UINT32 DesiredLatencyOrIntMax
	);

AsimovUploader_NotifyPolicyCodeUpdate(
	VOID
	);

AsimovUploadQueue_WorkItemCompleted(
	INT8 WorkDefLatency,
	INT16 Result,
	BOOLEAN IsPreempting,
	BOOLEAN IsShuttingDown,
	BOOLEAN IsForcing
	);

AsimovUploadQueue_Preempting(
	INT8 OutstandingLatency,
	INT8 QueuedLatency
	);

AsimovUploadQueue_SkippingPreemptionBecausePriorityNotHighEnough(
	INT8 OutstandingLatency,
	INT8 QueuedLatency
	);

AsimovUploadQueue_CreatingWork(
	INT8 WorkDefLatency,
	UINT64 PTP_WORK,
	UINT64 AsimovUploadWorkItemAddr
	);

AsimovUploadQueue_ServiceQueue_EmptyWorkQueue(
	VOID
	);

AsimovUploadQueue_ServiceQueue_ReleasingNetworkResources(
	VOID
	);

AsimovUploadQueue_ServiceQueue_UploadsDisallowed(
	VOID
	);

AsimovUploadQueue_AddWork(
	INT8 Latency
	);

AsimovUploader_PersistEvent(
	UTF8 EventPayload,
	INT8 EventLatency,
	INT8 EventPersistence,
	GUID GroupId,
	GUID ProviderId,
	UINT64 Categories,
	BOOLEAN IsCore,
	UINT32 ProcessId
	);

AsimovUploader_PersistEvent(
	UTF8 EventPayload,
	INT8 EventLatency,
	INT8 EventPersistence,
	GUID GroupId,
	GUID ProviderId,
	UINT64 Categories,
	BOOLEAN IsCore,
	UINT32 ProcessId,
	UINT8 StorageBufferType,
	UINT64 EventSizeBytes,
	UINT64 EventFireTimeTicks
	);

AsimovUploader_RejectEventForExceedingSizeLimit(
	UNICODESTRING EventName,
	ANSISTRING PortionOfEventString,
	UINT64 Length
	);

AsimovEventSerializer_SyntheticKilled(
	COUNTEDSTRING EventName,
	COUNTEDSTRING TenantToken,
	INT8 Persistence
	);

IAsimovEvent_PrepareForExport(
	COUNTEDSTRING EventName
	);

AsimovEventSerializer_ErrorRetrievingEventAggregatedSettings(
	COUNTEDSTRING EventName
	);

AsimovEventSerializer_SkippingRawEventForAggregatedEvent(
	COUNTEDSTRING EventName
	);

AsimovUploader_UploadScenario(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT32 HRESULT
	);

AsimovEventSerializer_TriggerBlocked(
	COUNTEDSTRING EventName,
	GUID GroupId,
	GUID ProviderId,
	BOOLEAN IsCore,
	INT8 EventLatency,
	UINT64 BlockReasons,
	COUNTEDANSISTRING EventPayload
	);

AsimovEventSerializer_TriggerKilled(
	COUNTEDSTRING EventName,
	COUNTEDSTRING TenantToken,
	INT8 Persistence
	);

AsimovEventSerializer_WatchdogEventReceived(
	VOID
	);

Utils_GetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	COUNTEDSTRING Value,
	INT32 HRESULT
	);

KillSwitchManager_SetKillRequest(
	UNICODESTRING Token,
	UINT8 Mode,
	UINT64 DurationMillis
	);

AsimovUploadWorkItem_UploadCannotProceedInProcessorMode_InvalidConfiguration(
	INT8 Latency,
	BOOLEAN ForceUpload,
	COUNTEDSTRING ForceUploadIKey,
	UINT8 StorageBufferType
	);

AsimovUploader_SelectedDataByLatency(
	INT8 Latency,
	BOOLEAN ForceUpload,
	UNICODESTRING IKey,
	UINT8 Type,
	UINT32 EventCount
	);

AsimovUploader_RejectedEvent(
	COUNTEDANSISTRING Name,
	ANSISTRING Reason,
	COUNTEDANSISTRING FullText,
	BOOLEAN AllRejected
	);

AsimovUploadWorkItem_DeletingBufferForTooManyUploadFailures(
	UINT32 EventCount,
	UINT64 BufferSize
	);

AsimovUploader_AcceptedAndRejectedEvents(
	UINT32 AcceptedNumberOfEvents,
	UINT32 RejecetedNumberOfEvents
	);

AsimovUploadWorkItem_NonRetriableFailure(
	UINT32 WinhttpStatus,
	UINT32 RejectedNumberOfEvents
	);

AsimovUploader_VortexUploadNetworkSuccess_0(
	UNICODESTRING Url,
	UINT32 HttpStatus,
	UNICODESTRING ResponseHeaders
	);

AsimovUploadWorkItem_HandleNetworkError(
	INT32 Result
	);

AsimovUploader_CustomRequestFieldExpired(
	VOID
	);

AsimovUploader_FailedDeviceTicketQuery(
	INT32 LastQueryResult
	);

AsimovUploader_DeviceTicketExpired(
	UINT64 LastQueryTimeTicks,
	INT32 LastQueryResult,
	UINT64 CurrentTimeTicks,
	UINT64 TicketExpiryTimeTicks
	);

Utils_SetRegistryKey(
	UINT32 DataType,
	INT32 HKEY,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	UINT32 Value,
	INT32 HRESULT
	);

AsimovUploadWorkItem_UploadBuffer_MsaServiceInactive(
	VOID
	);

AsimovUploadWorkItem_UploadBuffer_SevilleDataUploadDenied(
	VOID
	);

AsimovUploadWorkItem_OnWorkItemStarted(
	INT8 WorkDef_Latency,
	BOOLEAN WorkDef_Force,
	UNICODESTRING WorkDef_ForceTenant
	);

AsimovUploader_RealtimeUploadSucceeded(
	VOID
	);

AsimovUploader_CostDeferredUploadSucceeded(
	VOID
	);

AsimovUploadWorkItem_IsCostDeferredAllowedOverCosted(
	BOOLEAN IsOldEnough,
	BOOLEAN HasBandwidthSpace
	);

AsimovUploader_NormalUploadSucceeded(
	VOID
	);

AsimovUploader_ResponseLog(
	UNICODESTRING RequestHeaders,
	UINT32 StatusCode,
	UNICODESTRING ResponseHeaders,
	ANSISTRING ResponseText,
	UINT32 NumEvents,
	INT32 HRESULT
	);

AsimovUploader_UploadEventBuffer_TrustAnchorsCallbackSet(
	VOID
	);

Utils_FileTimeToMillisecond8601Failed(
	INT64 FileTime,
	UINT16 Year,
	UINT16 Month,
	UINT16 Day,
	UINT16 Hour,
	UINT16 Minute,
	UINT16 Second,
	UINT32 SecondDecimal,
	UINT32 LocaleId
	);

AsimovUploader_UploadEventBuffer(
	VOID
	);

HttpStatusCallback(
	UINT32 StatusCode,
	COUNTEDSTRING Message
	);

AsimovSharedPartAState_InvalidOrMissingHostId(
	UNICODESTRING HostId
	);

AsimovSharedPartAState_UpdateXboxGamingInfo(
	UNICODESTRING ContextId
	);

AsimovSharedPartAState_BuildIdEmpty(
	VOID
	);

AsimovSharedPartAState_BuildIdDisabled(
	VOID
	);

AsimovSharedPartAState_UpdateWcosProductId(
	UINT32 WCOSProductId
	);

Utils_GetWcosProductId(
	UINT32 WcosProductId
	);

AsimovSharedPartAState_FailedToUpdateWcosProductId(
	VOID
	);

AsimovSharedPartAState_UpdateProductType(
	UINT8 ProductType
	);

AsimovSharedPartAState_UpdateProductType(
	UINT8 ProductType,
	UINT16 ProductTypeExpanded
	);

AsimovSharedPartAState_ProductTypeTooLarge(
	UINT32 ProductType
	);

AsimovSharedPartAState_UnlicensedProductType(
	VOID
	);

Utils_OpenKeyFailed(
	INT32 HKEY,
	COUNTEDSTRING InputKeyName,
	UNICODESTRING ExpandedKeyName,
	UINT32 Error
	);

Utils_OpenKey(
	INT32 HKEY,
	COUNTEDSTRING InputKeyName,
	UNICODESTRING ExpandedKeyName,
	INT32 ResultHandle
	);

Utils_ServerLevelsEnum(
	COUNTEDSTRING Key,
	UINT32 Value
	);

AsimovSharedPartAState_UpdateIsEducationEnvironment(
	UINT8 IsEducationEnvironment
	);

UtcTelemetryAssertFailed(
	ANSISTRING Message,
	ANSISTRING Function
	);

AsimovSharedPartAState_HashWindowsAccountHashFailed(
	COUNTEDSTRING HashString,
	INT32 ErrorCode
	);

AsimovSharedPartAState_LookupWindowsAccountLsaLookupFailed(
	INT32 ErrorCode
	);

AsimovSharedPartAState_HashWindowsAccountHashSucceeded(
	COUNTEDSTRING HashString
	);

AsimovSharedPartAState_LookupWindowsAccountLsaLookupSucceeded(
	UINT32 UserAccountType,
	BOOLEAN IsDomainAccount,
	COUNTEDSTRING DomainName,
	COUNTEDSTRING UserName
	);

AsimovSharedPartAState_LookupWindowsAccountGetDcNameFailed(
	COUNTEDSTRING DomainName,
	UINT32 ErrorCode
	);

AsimovSharedPartAState_LookupWindowsAccountSidLookupFailed(
	INT32 ErrorCode
	);

AsimovSharedPartAState_LookupWindowsAccountSidConvertFailed(
	INT32 ErrorCode
	);

AsimovSharedPartAState_GetWindowsAccountHasFoundHash(
	COUNTEDSTRING SID,
	COUNTEDSTRING AccountHash
	);

AsimovSharedPartAState_GetUserIdUserSid(
	COUNTEDSTRING UserSid
	);

AsimovSharedPartAState_GetUserIdAccountHash(
	COUNTEDSTRING AccountHash
	);

AsimovSharedPartAState_GetUserIdConnectedId(
	COUNTEDSTRING ConnectedUserId
	);

AsimovSharedPartAState_DisableInProcFlightIdListening(
	VOID
	);

AsimovSharedPartAState_EnableFlightIdListening(
	VOID
	);

Utils_SetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	COUNTEDSTRING Value,
	INT32 HRESULT
	);

AsimovSharedPartAState_EducationEnvironmentRegistryKeyChangeNotificationReceived(
	VOID
	);

AsimovSharedPartAState_XboxGamingRegistryKeyChangeNotificationReceived(
	VOID
	);

AsimovSharedPartAState_OsEditionChangeNotificationReceived(
	VOID
	);

Trigger_XToken_NoXuidInGameEvent(
	VOID
	);

Trigger_XToken_ProviderReturnedEmpty(
	VOID
	);

Trigger_MSACouldntPopulateWithResolvedSid_UnableToRetrieveMSA(
	UINT32 IdentityType
	);

Trigger_MSAPopulateWithResolvedSID(
	UINT32 IdentityType
	);

IAsimovEvent_UnexpectedBootIdValue(
	INT16 DataType,
	UINT32 DataSize
	);

IAsimovEvent_LatencyInfo(
	BOOLEAN m_isFileBackedEvent,
	UINT64 GetTickCount64,
	UINT64 GetTicksTimestamp,
	UINT64 GetTimestamp
	);

DeflateStream_DeflateEnd(
	HEXINT64 StreamPtr
	);

DeflateStream_DeflateInit2(
	HEXINT64 StreamPtr
	);

DeflateStream_Deflate(
	HEXINT64 StreamPtr,
	BOOLEAN Finishing,
	UINT32 PreAvailIn,
	UINT32 PreAvailOut,
	UINT32 PostAvailIn,
	UINT32 PostAvailOut,
	UINT32 ZErr
	);

ProxyConfig_Update_ResetNonOverrideFailures(
	UINT32 OverrideFailureCount,
	COUNTEDSTRING OverrideProxyServer
	);

ProxyConfig_Update_ResetOverrideFailures(
	UINT32 NonOverrideFailureCount,
	COUNTEDSTRING OverrideProxyServer
	);

ProxyConfig_AutodetectedProxySelected(
	UINT32 OverrideFailureCount,
	UINT32 NonOverrideFailureCount,
	UNICODESTRING OverrideProxyServer
	);

ProxyConfig_TelemetryProxyUpdated(
	UNICODESTRING ProxyOverrideServer
	);

ProxyConfig_TelemetryProxySelected(
	UINT32 OverrideFailureCount,
	UINT32 NonOverrideFailureCount,
	UNICODESTRING OverrideProxyServer
	);

LifetimeManager_EnsureAclsOnFolder_AlteredAcls(
	UINT32 ChildrenFixed
	);

LifetimeManager_EnsureAclsOnFolder_FolderNotFound(
	VOID
	);

LifetimeManager_EnsureAclsOnFolder_AclsCorrect(
	VOID
	);

LifetimeManager_EnsureAclsOnFolder_Begin(
	COUNTEDSTRING ExpandedPath
	);

LifetimeManager_ResetRequired_UpdateRulesInProgress(
	UINT32 UpdateRulesFailureCount
	);

LifetimeManager_ResetNotRequired(
	VOID
	);

LifetimeManager_ResetRequired_UnexpectedStopsSinceSettingsDownload(
	UINT32 UnexpectedStopCount
	);

DiagTrack_Rundown_NoDevHealthMonTenant(
	VOID
	);

DiagTrack_Rundown(
	VOID
	);

DiagTrack_Rundown_NoAggregatedEventManager(
	VOID
	);

DiagTrack_Rundown_NoRemoteAggregatorManager(
	VOID
	);

DiagTrack_Rundown_NoUserManager(
	VOID
	);

DiagTrack_Rundown_NoScenarioObjectStorage(
	VOID
	);

DiagTrack_Rundown_NoAgentETWConsumer(
	VOID
	);

DiagTrack_Rundown_TestHooks(
	VOID
	);

DiagTrack_Rundown_TestHooks(
	VOID
	);

DiagTrack_Rundown_TestHooks_AllTestHooksDisabledDueToPpl(
	VOID
	);

DiagTrack_Rundown_NoUsageAnalyzer(
	VOID
	);

DiagTrack_Rundown_NoTraceManager(
	VOID
	);

DiagTrack_Rundown_NoScenarioManager(
	VOID
	);

DiagTrack_Rundown_LifetimeManager_Authorization(
	UINT32 CurrentAuthorization,
	UINT32 ReparsedAuthorization,
	BOOLEAN AllowedToProcessData
	);

DiagTrack_Rundown(
	VOID
	);

DiagTrack_Rundown_NoSettingsManager(
	VOID
	);

DiagTrack_Rundown_TestHooks_HooksInfo(
	COUNTEDSTRING Key,
	COUNTEDSTRING Value,
	UNICODESTRING Data
	);

LifetimeManager_ClearEventStore(
	VOID
	);

LifetimeManager_ExportersNotAllowed(
	VOID
	);

LifetimeManager_ClearUnexpectedStopsSinceSettingsDownload(
	VOID
	);

Utils_FailedToWriteFile(
	UNICODESTRING FileName,
	INT32 HRESULT
	);

CLifetimeManager_CleanPreviousOsState(
	ANSISTRING CurrentOsVer,
	ANSISTRING PreviousOsVer
	);

CLifetimeManager_KeepPreviousBootState(
	ANSISTRING CurrentOsVer,
	ANSISTRING PreviousOsVer
	);

RecursivelyDeleteDirectory_DeleteByPathInvalidValidationHandle(
	UINT32 LastError
	);

Utils_ExpandAndCreateDirectory_SkippingDiskRootPath(
	COUNTEDSTRING InputPath,
	UNICODESTRING ExpandedPath,
	UINT64 CurrentPathIndex
	);

Utils_ExpandAndCreateDirectoryFailed(
	COUNTEDSTRING InputPath,
	UNICODESTRING ExpandedPath,
	UINT32 Error
	);

Utils_ExpandAndCreateDirectoryFailed(
	COUNTEDSTRING InputPath,
	UNICODESTRING CurrentExpandedPath,
	UINT32 Error
	);

Utils_CreateRegistryKeyFailed(
	INT32 HKEY,
	COUNTEDSTRING InputKeyName,
	UNICODESTRING ExpandedKeyName,
	UINT32 Error
	);

Utils_CreateRegistryKey(
	INT32 HKEY,
	COUNTEDSTRING InputKeyName,
	UNICODESTRING ExpandedKeyName,
	INT32 ResultHandle
	);

Utils_DeleteTree(
	INT32 hKey,
	COUNTEDSTRING subkeyName,
	BOOL32 deleteSubkey,
	INT32 HRESULT
	);

LifetimeManager_InitialCommonSchemaVersion(
	UNICODESTRING LastCsVersion
	);

ResultMacro_LogError(
	ANSISTRING File,
	UINT32 LineNumber,
	UINT32 FailureType,
	INT32 FailureCount,
	UINT32 ThreadId,
	INT32 HRESULT,
	UNICODESTRING UserMessage,
	ANSISTRING FailingCode,
	ANSISTRING FailingFunction
	);

SettingsManager_InvalidMsaTokenClientIdString(
	UNICODESTRING MsaClientIdStr
	);

SettingsManager_DumpDefinedProviderGroups(
	ANSISTRING GroupId,
	UNICODESTRING GroupName,
	UNICODESTRING GroupShortName,
	UNICODESTRING TenantToken
	);

SettingsManager_UtcSettingReceivedFromHost(
	COUNTEDSTRING Name,
	COUNTEDSTRING Value
	);

SettingsManager_DumpSettings(
	UNICODESTRING Name,
	UNICODESTRING Value
	);

SettingsManager_OneSettingsWnfUpdate_Finished(
	VOID
	);

SettingsManager_OneSettingsWnfUpdate_Namespace(
	UNICODESTRING Name,
	UINT64 Hash,
	UINT64 Time
	);

DiagTrack_Rundown_SettingsManager(
	VOID
	);

DiagTrack_Rundown_SettingsManager_SettingsInfo(
	COUNTEDSTRING Namespace,
	COUNTEDSTRING Key,
	UNICODESTRING Value
	);

DiagTrack_Rundown_SettingsManager(
	VOID
	);

SettingsEndpoint_MillisToNextDownload(
	UNICODESTRING Partner,
	UNICODESTRING Feature,
	UINT32 PolicyDelay,
	UINT32 EffectivePolicyDelay,
	UINT32 MillisToNextDownload
	);

SettingsManager_DeleteCorruptEndpointKey(
	UNICODESTRING corruptKey,
	INT32 hr
	);

SettingsEndpoint_ResetState(
	UNICODESTRING Partner,
	UNICODESTRING Feature
	);

UnregisterSettingsEndpoint_InvalidPartnerFeature(
	COUNTEDSTRING partner,
	COUNTEDSTRING feature
	);

UnregisterSettingsEndpoint_InvalidName(
	COUNTEDSTRING endpoint
	);

RegisterSettingsEndpoint_InvalidPartnerFeature(
	COUNTEDSTRING partner,
	COUNTEDSTRING feature
	);

SettingsManager_UnregisterSettingsEndpoint(
	COUNTEDSTRING endpoint
	);

RegisterSettingsEndpoint_InvalidName(
	COUNTEDSTRING endpoint
	);

SettingsManager_ParsedInvalidUploadEndpoint_TooManyUrlDelimiters(
	COUNTEDSTRING UrlString
	);

SettingsManager_ParsedInvalidUploadEndpoint_MissingUrlDelimiter(
	COUNTEDSTRING UrlString
	);

SettingsManager_ParsedInvalidUploadEndpoint_InvalidEndpointType(
	COUNTEDSTRING TypeRegionString
	);

SettingsManager_ParsedInvalidUploadEndpoint_TooManyDelimiters(
	COUNTEDSTRING TypeRegionString
	);

SettingsManager_ParsedInvalidUploadEndpoint_MissingDelimiter(
	COUNTEDSTRING TypeRegionString
	);

SettingsManager_ParsedInvalidEndpointPriority(
	COUNTEDSTRING PriorityString
	);

SettingsManager_ParsedInvalidEndpointType(
	COUNTEDSTRING EndpointDefinitionString
	);

SettingsManager_ReusingExistingDynamicSettingsEndpoint(
	UNICODESTRING Endpoint,
	UINT32 OldPriority,
	UINT32 NewPriority
	);

SettingsManager_RecreatingDynamicSettingsEndpointWithChangedType(
	UNICODESTRING Endpoint,
	UINT32 OldType,
	UINT32 NewType
	);

SettingsManager_RegisteringNewDynamicSettingsEndpoint(
	UNICODESTRING Endpoint,
	UINT32 Type,
	UINT32 Priority
	);

SettingsManager_MoreThanOneBitSetCategoryWithEventName(
	UNICODESTRING NameSpace,
	UNICODESTRING EventName,
	UINT64 Category
	);

SettingsManager_JsonPatchResult(
	COUNTEDSTRING PatchFileName,
	INT16 PayloadType,
	BOOLEAN PatchSuccess,
	ANSISTRING BaseJson,
	ANSISTRING PatchJson,
	ANSISTRING MergedJson
	);

SettingsManager_SettingNamespacePersisted(
	COUNTEDSTRING Version,
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	COUNTEDSTRING ClientETag,
	UNICODESTRING ServerETag
	);

SettingsManager_UnregisteringSettingsEndpoint_NoContentAvailable(
	VOID
	);

SettingsManager_SettingNamespaceDownloaded(
	INT32 ErrorCode,
	COUNTEDSTRING Version,
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	UNICODESTRING Parameters,
	COUNTEDSTRING ClientETag,
	UNICODESTRING ServerETag,
	UINT32 RefreshIntervalFromHeader,
	UNICODESTRING Headers,
	INT32 Changed,
	UINT32 StatusCode
	);

SettingsManager_DownloadAborted(
	VOID
	);

SettingsManager_UnregisteringSettingsEndpoint_NamespaceTooLong(
	VOID
	);

SettingsManager_SkippingDownload_NoNewEventsPersisted(
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	UINT64 LastDownloadTime,
	UINT64 LastPersistedEventTime
	);

LoadSettingsFromFile(
	UNICODESTRING FileName
	);

Utils_SetRegistryKey(
	INT32 HKEY,
	UINT32 DataType,
	COUNTEDSTRING KeyName,
	COUNTEDSTRING ValueName,
	UINT32 ValueCount,
	INT32 HRESULT
	);

SettingsManager_RegisteredNewRegion(
	UINT32 Type,
	UNICODESTRING Region,
	UNICODESTRING ServerUrl,
	UNICODESTRING TicketUrl
	);

SettingsManager_SkippingOnDownloadedSettingsFiles(
	VOID
	);

SkippingOnDemandNoRequestSettingsFile(
	UNICODESTRING File
	);

SkippingNonTelemetrySettingsFile(
	UNICODESTRING File
	);

SkippingDownloadedSettingsPatchFile(
	UNICODESTRING File
	);

SettingsManager_CannotParseValueFromString_0(
	INT32 ErrorCode,
	COUNTEDSTRING SettingName,
	COUNTEDSTRING SettingValue
	);

SettingsManager_UnregisterSettingsReceiver(
	UNICODESTRING UnregistrantName,
	HEXINT64 UnregistrantAddress
	);

SettingsManager_RegisterSettingsReceiver(
	COUNTEDSTRING RegistrantName,
	HEXINT64 RegistrantAddress
	);

SettingsManager_SkippingWnfPublish_NoSettingsChanged(
	VOID
	);

SettingsManager_DownloadLoopAborted_MaxAllowedErrorsReached(
	VOID
	);

SettingsManager_DownloadLoopAborted_TimeoutEncountered(
	VOID
	);

SettingsManager_DownloadLoopAborted_CancelEventSet(
	VOID
	);

SettingsManager_DownloadSettingsEndpointFailed(
	INT32 ErrorCode,
	UINT8 DownloadLoopErrorCount
	);

SkippingDownloadDueToScenarioOptInStatus(
	UNICODESTRING Endpoint
	);

SettingsManager_AllowUtcDerivedDownloadBelowFull(
	VOID
	);

AttemptingDownload(
	UNICODESTRING Endpoint
	);

SettingsManager_AllowSiufDownloadBelowFull(
	VOID
	);

SettingsManager_AllowUifDownloadBelowFull(
	VOID
	);

SkippingDownloadDueToNetworkPolicy(
	UNICODESTRING Endpoint
	);

SkippingDownloadDueToPowerPolicy(
	UNICODESTRING Endpoint
	);

SkippingDownloadDueToNoInternet(
	UNICODESTRING Endpoint
	);

DownloadNotScheduled(
	UNICODESTRING Endpoint
	);

SettingsManager_DownloadsNotEnabled_AzureHostMode(
	VOID
	);

SettingsManager_OobeCompleteCallback(
	VOID
	);

SettingsManager_DownloadLatestSettingsApiUpdateRules(
	VOID
	);

SettingsManager_DownloadsNotEnabled(
	VOID
	);

SettingsManager_DownloadLatestSettingsApi_DownloadFailedNoChange(
	INT32 request.OutResult
	);

SettingsManager_DownloadLatestSettingsApi_DownloadFailedInboxContentApplied(
	INT32 request.OutResult
	);

SettingsManager_DownloadLatestSettingsApi_DownloadSucceededNoChange(
	VOID
	);

UtcApiManager_UnregisteringSettingsEndpoint(
	VOID
	);

SettingsManager_RegisteringSettingsEndpoint(
	VOID
	);

SettingsManager_ApiDownloadSettingsWorkCallback_InvalidPartnerFeature(
	COUNTEDSTRING partner,
	COUNTEDSTRING feature
	);

SettingsManager_ApiDownloadSettingsWorkCallback_NotAuthorized(
	VOID
	);

SettingsManager_ApiDownloadSettingsWorkCallbackStart(
	UNICODESTRING Partner,
	UNICODESTRING Feature,
	BOOL32 AllowWinHttpCostedNetworkUse,
	BOOL32 IsScenarioNameSpace
	);

SettingsManager_DownloadSettingsWorkCallback(
	VOID
	);

SettingsManager_SettingUpdateRulesEvent(
	BOOLEAN SettingsChanged,
	BOOLEAN CampaignsChanged
	);

SettingsManager_InboxUTCAllowFileWasCopied(
	VOID
	);

SettingsManager_OobeCompleteAtStartup(
	VOID
	);

SettingsManager_OobeCompleteQueryFailed(
	INT32 ErrorCode
	);

SettingsManager_OobeCompletionSubscriptionFailed(
	INT32 ErrorCode
	);

SettingsManager_OobeNotCompleteAtStartup(
	VOID
	);

SystemStateManager_GetNightsWatchState(
	UINT8 result
	);

SystemStateManager_WldpNotPresent(
	VOID
	);

SystemStateManager_SModeQueryFailure(
	INT32 HRESULT
	);

SystemStateManager_GetComputerName(
	COUNTEDSTRING ComputerName
	);

SystemStateManager_FailedWaitForNetworkConnectivity(
	INT32 HRESULT
	);

SystemStateManager_TimerWake(
	COUNTEDSTRING Name
	);

SystemStateManager_InitialConnectionState(
	BOOLEAN IsNetworkConnected,
	BOOLEAN SetupInProgress
	);

SystemStateManager_ActivePolicyCodeUpdated(
	UNICODESTRING OriginalValue,
	UNICODESTRING NewValue
	);

SystemStateManager_WnfStateChangeCallback_ACCharging(
	UINT32 Level
	);

SystemStateManager_NoXboxWnfNotification(
	VOID
	);

SystemStateManager_XboxMaintenancePeriod(
	ANSISTRING Disposition
	);

SystemStateManager_SModeSwitched(
	BOOLEAN Previous S Mode value,
	BOOLEAN Current S Mode value
	);

SystemStateManager_NightsWatchStateSwitched(
	UINT8 Previous NightsWatch state value,
	UINT8 Current NightsWatch state value
	);

SystemStateManager_WnfStateChangeCallback_FreeNetworkPresent(
	UINT32 Level
	);

SystemStateManager_WnfStateChangeCallback_InternetPresent(
	UINT32 Level
	);

AsimovUploader_NotifyInternetPresentUpdate(
	VOID
	);

SystemStateManager_WnfStateChangeCallback_RmQuietMode(
	UINT32 Flags
	);

SystemStateManager_BeginTrackingSystemState_Subscribe(
	COUNTEDANSISTRING Description
	);

SystemStateManager_WnfStateChangeCallback_BatteryChargeLevel(
	UINT32 Level
	);

SystemStateManager_SModeTrialMode(
	VOID
	);

SystemStateManager_NightsWatchState_Init(
	UINT8 NightsWatchWState
	);

SystemStateManager_UserPresenceTransition(
	BOOL32 UserWasPreviouslyPresent,
	BOOL32 UserPresent
	);

SystemStateManager_ConnectedStandbyTransition(
	ANSISTRING Disposition
	);

Agent_ForwardEventToHost(
	COUNTEDSTRING EventName
	);

Agent_TransportError(
	INT32 ErrorCode
	);

HostDisconnectSignalReceived(
	INT32 HostErrorCode
	);

Agent_SetLocalTelemetryLevelInRegistry(
	UINT8 TelemetryLevel
	);

Agent_InvalidHostVersion(
	UINT8 HostVersion,
	UINT8 AgentVersion,
	UINT8 MinimumSupportedVersion
	);

Agent_AcceptedHostVersion(
	UINT8 HostVersion,
	UINT8 AgentVersion
	);

Agent_ReceivedMessageFromHost(
	INT8 MessageType
	);

Agent_SignalShutdownOnMessageReceivedFailure(
	VOID
	);

Agent_ConnectedToHost(
	VOID
	);

Agent_SignalReset(
	UINT32 WaitMillis
	);

Agent_Reset(
	VOID
	);

Agent_ResetAgentEventSet(
	VOID
	);

Agent_StopEventSet(
	VOID
	);

Agent_ShutdownAgentEventSet(
	VOID
	);

LifetimeManager_SignalShutdown(
	HEXINT64 StopEventHandle
	);

Agent_SignalShutdown(
	VOID
	);

DynamicConfig_CannotReadTestHookDueToPpl(
	VOID
	);

EnterpriseData_Setting_Not_Found(
	BOOL32 IsDpswSettingFound,
	BOOL32 WinDiagUrlSettingFound,
	BOOL32 winFunUrlsettingFound,
	BOOL32 WreFeUrlsettingFound
	);

EnterpriseData_All_Settings_Consumed(
	UINT64 IsProcessor,
	UNICODESTRING WinDiagServerUrl,
	UNICODESTRING WinFunServerUrl,
	UNICODESTRING WatsonServerName,
	UINT64 LastSettingsUpdatedTime
	);

EnterpriseData_DPSWIsProcessorModeAllowed_0(
	BOOL32 IsProcessorModeAllowed
	);

EnterpriseData_UsingDefaultAadDeviceTokenResourceId(
	UNICODESTRING AadDeviceTokenResourceId
	);

EnterpriseData_UsingDefaultAadDeviceTokenClientId(
	UNICODESTRING AadDeviceTokenClientId
	);

EnterpriseData_IsAadDeviceJoined_0(
	BOOL32 IsAadDeviceJoined
	);

EnterpriseData_NotifySettingUpdate(
	BOOL32 isPrevSettingKnown,
	UINT64 isProcessor,
	BOOL32 isSettingsReceived,
	UINT64 programFlags
	);

EnterpriseData_OobeCompleteCallback(
	VOID
	);

EnterpriseData_RegisterEndpoint(
	BOOL32 IsRegisteredAsSettingsReceiver
	);

EnterpriseData_OobeIsInProgress(
	VOID
	);

EnterpriseData_OobeCompleted(
	VOID
	);

EnterpriseData_Initialize_Start(
	VOID
	);

EnterpriseData_DeleteTree(
	VOID
	);

EnterpriseData_Initialize_Finished(
	VOID
	);

EnterpriseData_AadjNotificationReceived(
	UINT8 data
	);

AuthorizationInfo_SkipProcessorModeTransitionDeleteSignal(
	VOID
	);

AuthorizationInfo_RetailOs_CoCreateInstanceFailed(
	INT32 HRESULT
	);

AuthorizationInfo_PopulateFromOs(
	BOOLEAN CanCollectAnyTelemetry,
	BOOLEAN CanCollectHeartbeats,
	BOOLEAN CanCollectCoreTelemetry,
	BOOLEAN CanCollectOsTelemetry,
	BOOLEAN CanReportScenarios,
	BOOLEAN CanAddMsaToMsTelemetry,
	BOOLEAN CanPerformDiagnosticEscalations,
	BOOLEAN CanReportUifEscalations,
	BOOLEAN CanCollectWindowsAnalyticsEvents,
	BOOLEAN CanPerformSiufEscalations,
	BOOLEAN IsProcessorMode,
	BOOLEAN CanCollectClearUserIds,
	BOOLEAN CanIncludeDeviceNameInDiagnosticData,
	BOOLEAN IsProcessorModeUndetermined
	);

AuthorizationInfo_RingAuthorization_CoCreateInstanceFailed(
	INT32 HRESULT
	);

LifetimeManager_AuthProxyUsageDisabled(
	VOID
	);

LifetimeManager_DisallowDeviceNameInDiagnosticData(
	VOID
	);

LifetimeManager_EscalationsDisabled(
	VOID
	);

LifetimeManager_MsaUserIdProhibited_ProcessorMode(
	VOID
	);

LifetimeManager_CoreAndHeartBeatsDisabled(
	VOID
	);

AuthorizationInfo_TelemetryPermissionAPIResult(
	UINT32 AllowedTelemetry
	);

AuthorizationInfo_IsControllerMode_0(
	BOOL32 isProcessorModeAllowed,
	BOOL32 isAadDeviceJoined,
	BOOL32 isSettingsRecieved,
	BOOL32 isProcessorMode,
	UINT32 m_data
	);

DeviceDelete_0(
	ANSISTRING __TlgCV__,
	BOOLEAN IsInitiatedByUser
	);

DeviceDelete_0(
	ANSISTRING __TlgCV__,
	BOOLEAN IsInitiatedByUser
	);

UtcWatchdog_ThreadExitCode(
	COUNTEDANSISTRING ThreadName,
	UINT32 ExitCode,
	BOOLEAN GetExitCodeSucceeded,
	UINT32 GetExitCodeLastError
	);

UtcWatchdogPoke(
	VOID
	);

ConditionalTimer_GetTimeToWakeup_Timeout(
	UNICODESTRING TimerName,
	BOOLEAN OnBattery,
	BOOLEAN OnCostedNetwork,
	BOOLEAN OnConnectedStandby,
	BOOLEAN InGeneralQuietMode,
	BOOLEAN NoInternetAvaiable
	);

ConditionalTimer_GetTimeToWakeup_Infinite(
	UNICODESTRING TimerName,
	BOOLEAN OnBattery,
	BOOLEAN OnCostedNetwork,
	BOOLEAN OnConnectedStandby,
	BOOLEAN InGeneralQuietMode,
	BOOLEAN NoInternetAvaiable
	);

ETWConsumer_EventBlockedNoRealtimeAllowed(
	UINT8 Latency,
	COUNTEDSTRING EventName
	);

ETWConsumer_EventRealtimeBlocked(
	UINT8 Latency,
	COUNTEDSTRING EventName
	);

ETWConsumer_EventBlockedNonMatchingProduct(
	COUNTEDSTRING EventName,
	UINT64 EventTargetProducts,
	UINT64 AcceptedProducts
	);

ETWConsumer_EventAllowed_Realtime(
	UINT8 Latency,
	COUNTEDSTRING EventName
	);

ETWConsumer_EventAllowed_Core(
	COUNTEDSTRING EventName,
	HEXINT64 Signature
	);

ETWConsumer_EventBlockedNoHash_Core(
	COUNTEDSTRING EventName,
	HEXINT64 Signature
	);

ETWConsumer_EventBlockedNoRealtimeDataApproval(
	UINT8 Latency,
	COUNTEDSTRING EventName
	);

ETWConsumer_EventBlockedNoData_Core(
	COUNTEDSTRING EventName
	);

ETWConsumer_EventBlockedNoData(
	UINT64 InCodeTags,
	COUNTEDSTRING EventName
	);

ETWConsumer_EventAllowedByTag(
	COUNTEDSTRING EventName
	);

ETWConsumer_EventCoreBlocked(
	COUNTEDSTRING EventName
	);

ETWConsumer_EventBlockedNoCoreDataApproval(
	BOOLEAN IsCoreData,
	COUNTEDSTRING EventName
	);

ETWConsumer_EventBlocked(
	COUNTEDSTRING EventName
	);

ETWConsumer_EventBlocked_UnapprovedInCodeTags(
	COUNTEDSTRING EventName,
	UINT64 InCodeTags,
	UINT64 UnapprovedTags
	);

EventBlockCache_AllowListsEmpty(
	VOID
	);

HeartBeatManager_NextHeartBeatFireTime_LessThan_currentTime(
	VOID
	);

HeartBeatManager_HeartBeatIntervalMs_GreaterThan_30mins(
	UINT32 heartBeatIntervalMs
	);

HeartBeatManager_nextTimeToFireHeartBeat(
	UINT32 heartBeatIntervalMs,
	UINT64 currentTime
	);

HeartBeatManager_ResettingHeartBeatNextFireTimeWithTenant(
	UNICODESTRING tenant,
	UINT64 minTimeToFireNextHeartbeat
	);

HeartBeatManager_TenantNeedsToFire(
	UNICODESTRING tenant
	);

MetadataEngine_EventThreadWaitFailed(
	INT32 WaitResult
	);

MetadataEngine_RegistryThreadWaitFailed(
	INT32 WaitResult
	);

MetadataEngine_StartEventThread(
	VOID
	);

MetadataEngine_StartRegistryThread(
	VOID
	);

MetadataEngine_InitializeFeatureConfigMetadata(
	INT32 HRESULT
	);

MetadataEngine_InitializeMetadata(
	COUNTEDSTRING MetaDataTypeName,
	INT32 HRESULT
	);

PdcNetworkActivation_Callback(
	COUNTEDSTRING Name,
	UINT64 Start,
	UINT64 Duration,
	UINT64 Renewals,
	INT32 Reason
	);

PdcNetworkActivation_Deactivate(
	UNICODESTRING Name,
	INT32 NtStatus,
	UINT64 Duration,
	UINT64 Renewals,
	INT32 Reason
	);

PdcNetworkActivation_Activate(
	UNICODESTRING Name,
	INT32 NtStatus,
	INT32 PdcResult
	);

DeviceTicket_GetTicket(
	UNICODESTRING Target,
	UNICODESTRING Policy,
	GUID ApplicationGuid
	);

DiagTrack_Rundown_BlackBox_StringEventDump(
	COUNTEDSTRING LogName,
	UINT64 FileTime,
	UINT64 TickCount,
	UNICODESTRING Data
	);

DiagTrack_Rundown_BlackBox(
	VOID
	);

DiagTrack_Rundown_BlackBox(
	VOID
	);

UserManager_NotAuthorizedToUseAuthenticatedProxy(
	VOID
	);

UserManager_FlushShellIdCache(
	VOID
	);

DiagTrack_Rundown_UserManager(
	VOID
	);

DiagTrack_Rundown_UserManager_SessionUser(
	UINT32 SessionId,
	UNICODESTRING UserSid,
	UINT32 NumGuests,
	UNICODESTRING Xuid,
	UINT64 UserContextToken
	);

DiagTrack_Rundown_UserManager(
	VOID
	);

DiagTrack_Rundown_UserManager_InteractiveSessionId(
	UINT32 InteractiveSessionId
	);

DiagTrack_Rundown_UserManager_UMgrQueryUserToken(
	UINT32 SessionId,
	UINT64 UserContext,
	INT32 HRESULT
	);

UserManager_OnUserAuthStatusChanged(
	UINT32 SessionId,
	UINT64 UserContext,
	UNICODESTRING Xuid
	);

UserManager_GetXuidForUserContext(
	UINT64 UserContext,
	UNICODESTRING Xuid
	);

UserManager_AddNewUsers(
	UINT32 SessionId,
	UINT64 UserContext,
	INT32 HRESULT,
	BOOLEAN IsUserKnown
	);

UserManager_FoundInteractiveSessionOnStartup(
	UINT32 SessionId
	);

UserManager_FailedToDisplayToastNotification_SessionSwitch_0(
	UINT32 SessionId,
	UINT64 UserContext,
	INT32 HRESULT
	);

InitialConsentManager_SetAllowedToProcessData(
	ANSISTRING Reason
	);

InitialConsentManager_RegisteringForOOBEComplete(
	VOID
	);

InitialConsentManager_FlightingStatus(
	BOOL32 IsUpgradedInstallation,
	HRESULT HresultFromIsFlightingRing,
	BOOL32 IsFlightingRing
	);

InitialConsentManager_IsOobeInProgress(
	BOOL32 IsOobeInProgress
	);

RemoteAggregatorManager_ControlGroupSetProviderEnabled(
	COUNTEDANSISTRING ControlGroupName,
	GUID ProviderGuid,
	UINT64 KeywordsAny,
	UINT64 KeywordAll,
	UINT8 Level,
	UINT32 Flags
	);

RemoteAggregatorManager_ControlGroupUpdate(
	UINT32 ControlCode
	);

RemoteAggregatorManager_RefreshAndCopyActiveForwarders(
	VOID
	);

DiagTrack_Rundown_RemoteAggregatorManager(
	VOID
	);

RemoteAggregatorManager_LogRegisteredForwarder(
	UNICODESTRING ForwarderId,
	UINT64 Keywords,
	UINT8 Level
	);

DiagTrack_Rundown_RemoteAggregatorManager(
	VOID
	);

RemoteAggregatorManager_UnmatchedTrigger(
	GUID ProviderId,
	UINT64 TriggerKeywords,
	UINT64 TriggerLevel,
	COUNTEDSTRING TriggerName
	);

RemoteAggregatorManager_MatchedTrigger(
	GUID ProviderId,
	UINT64 TriggerKeywords,
	UINT64 TriggerLevel,
	COUNTEDSTRING TriggerName
	);

RemoteAggregatorManager_InvalidTriggerCriteriaEntry(
	UNICODESTRING Entry
	);

RemoteAggregatorManager_RegisteredTriggerProperties(
	UNICODESTRING AggregatorName,
	GUID ProviderId,
	UINT64 Keywords,
	UINT8 Level
	);

RemoteAggregatorManager_IgnoreDisabledAggregatorTriggerCriteriaEntry(
	UNICODESTRING Entry
	);

RemoteAggregatorManager_WatchdogReplyReceived(
	UINT32 Pid
	);

UtcApiManager_ReloadSettingsCompletionEvent(
	VOID
	);

AgentManager_SetAgentContainerTelemetryId(
	COUNTEDSTRING Agent,
	UINT32 ContainerTelemetryId
	);

AgentManager_SendingScenarioObject(
	UINT16 ObjectType,
	UINT64 ObjectHash,
	UINT64 SerializedObjectSize
	);

ScenarioObjectCache_LoadingSerializedObjectFromSql(
	UINT64 ObjectHash,
	ANSISTRING ScenarioDbObjectType
	);

AgentManager_ScenarioObjectRequestReceived(
	UINT16 ObjectType,
	UINT64 ObjectHash
	);

ScenarioObjectCache_UsingCachedSerializedObject(
	UINT64 ObjectHash,
	ANSISTRING ScenarioDbObjectType
	);

AgentManager_GetAllConnectedAgentIds_UnmatchedAgent(
	COUNTEDSTRING RequestedTelemetryIds,
	COUNTEDSTRING AgentId,
	UINT32 ContainerTelemetryId
	);

AgentManager_GetAllConnectedAgentIds_MatchedAgent(
	COUNTEDSTRING RequestedTelemetryIds,
	COUNTEDSTRING AgentId,
	UINT32 ContainerTelemetryId
	);

AgentManager_ResolveContainerId(
	UNICODESTRING HvsiContainerId,
	UNICODESTRING CommandLine
	);

AgentManager_AgentIsActive(
	COUNTEDSTRING AgentId,
	UINT64 MillisSinceLastMessageReceived
	);

AgentManager_AgentAlreadyIdle(
	COUNTEDSTRING AgentId,
	UINT64 MillisSinceLastActive
	);

AgentManager_LogIdleAgentSynthetics_AgentNotFullyInitialized(
	COUNTEDSTRING AgentId
	);

AgentManager_SignalAgentRemoval(
	UINT64 AgentSocket,
	INT32 ErrorCode
	);

AgentManager_AgentIdleStateChange(
	COUNTEDSTRING AgentId,
	BOOLEAN IsIdle,
	UINT64 IdleDurationMillis
	);

AgentManager_TransportError(
	INT32 ErrorCode,
	UINT64 AgentSocket,
	UINT32 RequestType
	);

AgentManager_ReceivedMessageFromAgent(
	UINT64 AgentSocket,
	INT8 MessageType
	);

AgentManager_AgentDisconnectSignalReceived(
	UINT64 AgentSocket,
	INT32 AgentErrorCode
	);

AgentManager_DiscardedEventNotAllowed(
	COUNTEDSTRING EventName
	);

AgentManager_InvalidAgentVersion(
	UINT64 AgentSocket,
	UINT8 AgentVersion,
	UINT8 HostVersion,
	UINT8 MinimumSupportedVersion
	);

AgentManager_AcceptedAgentVersion(
	UINT64 AgentSocket,
	UINT8 HostVersion,
	UINT8 AgentVersion
	);

AgentManager_AddAgent(
	UINT64 AgentSocket,
	ANSISTRING TransportType
	);

AgentManager_SendAuthorizationInfoToAgent(
	COUNTEDSTRING AgentId,
	UINT8 AgentProtocolVersion,
	UINT32 CurrentAuthorization,
	UINT32 EffectiveAuthorization
	);

AgentManager_RemoveAgent(
	UINT64 AgentSocket,
	INT32 ErrorCode
	);

AgentManager_ListeningStopped(
	VOID
	);

AgentManager_ListeningStopping(
	HEXINT64 Transport,
	UINT64 Socket
	);

AgentManager_StopEventSet(
	VOID
	);

ApiServer_FetchReportData_ImpersonatingUser(
	VOID
	);

UtcApiManager_MetaPropertyFound_SessionId(
	UNICODESTRING SessionIdKey,
	UNICODESTRING SessionIdValue
	);

UtcApiManager_MetaPropertyFound_MutexTimeoutMs(
	INT32 MutexTimeoutMsValue
	);

UtcApiManager_MetaPropertyFound_EnableCourtesyEngineCallback(
	BOOLEAN EnableCourtesyEngineCallbackValue
	);

UtcApiManager_MetaPropertyFound_InstanceId(
	GUID InstanceIdValue
	);

UtcApiManager_MetaPropertyFound_CollectWerEtwLogs(
	BOOLEAN CollectWerEtwLogsValue
	);

UtcApiManager_TenantForceUpload(
	UNICODESTRING IKey,
	UINT8 Latency,
	INT32 UploadOverCosted,
	INT32 UploadOverBattery
	);

UtcApiManager_TenantForceUpload(
	VOID
	);

UtcApiManager_ForceUploadTimingInfo(
	UINT64 RuntimeFileTime
	);

UtcApiManager_TenantFailedPplCheck(
	UNICODESTRING IKey,
	BOOLEAN IsCallerPpl,
	BOOLEAN IsUtcPpl
	);

UtcApiManager_StopCustomTrace(
	VOID
	);

UtcApiManager_StopCustomTrace(
	UINT64 ProfileHash
	);

UtcApiManager_SnapCustomTrace(
	UNICODESTRING outputDirectory
	);

UtcApiManager_SnapCustomTrace_OutputDirectoryAlreadyExists(
	VOID
	);

UtcApiManager_SnapCustomTrace(
	UNICODESTRING outputDirectory
	);

UtcApiManager_StartCustomTrace(
	UINT64 CustomTraceHash,
	UINT64 CustomTraceMaxDuration
	);

UtcApiManager_StartCustomTrace_StoppingRunningCustomTrace(
	UINT64 CustomTraceHash
	);

UtcApiManager_StartCustomTrace_FailedToReadCustomProfile(
	UNICODESTRING CustomProfilePath,
	INT32 HRESULT
	);

UtcApiManager_GetCustomTraceList_UserProfile(
	UNICODESTRING CustomProfileRootDirectory
	);

UtcApiManager_StartCustomTrace(
	GUID CustomTraceInstanceId,
	UINT64 CustomTraceHash,
	UINT64 CustomTraceMaxDuration
	);

UtcApiManager_GetCustomTraceList_Public(
	UNICODESTRING CustomProfileRootDirectory
	);

UtcApiManager_GetCustomTraceList(
	UNICODESTRING CustomProfileRootDirectory
	);

UtcApiManager_GetNextScheduledFireTime(
	VOID
	);

UtcApiManager_GetTimerConfiguration(
	UNICODESTRING TimerName
	);

UtcApiManager_ClearTimerConfiguration(
	UNICODESTRING TimerName
	);

UtcApiManager_ReloadSettings(
	VOID
	);

UtcApiManager_DownloadLatestSettings(
	INT32 DownloadOverCostedNetwork,
	INT32 DownloadOverBattery
	);

UtcApiManager_UpdateTimerConfiguration(
	UNICODESTRING TimerName
	);

UtcApiManager_ForceUpload(
	UINT8 Latency,
	INT32 UploadOverCosted,
	INT32 UploadOverBattery
	);

UtcApiManager_ResetUsageMetrics(
	VOID
	);

UtcApiManager_GetKnownTraceList(
	VOID
	);

UtcApiManager_GetKnownTraceList(
	VOID
	);

UtcApiManager_ForceUpload(
	VOID
	);

UtcApiManager_GetActiveTraceRuntime(
	VOID
	);

UtcApiManager_GetActiveTraceRuntime(
	VOID
	);

UtcApiManager_IsTraceRunning(
	VOID
	);

UtcApiManager_IsTraceRunning(
	VOID
	);

UtcApiManager_GetActiveScenarioListWithPartnerFeatureSet_Done(
	VOID
	);

UtcApiManager_GetActiveScenarioListWithPartnerFeatureSet(
	UNICODESTRING Partner,
	UNICODESTRING Feature
	);

UtcApiManager_GetActiveScenarioList_Done(
	VOID
	);

UtcApiManager_GetActiveScenarioList(
	VOID
	);

UtcApiManager_DownloadLatestSettingsForNamespace(
	UNICODESTRING Partner,
	UNICODESTRING Feature,
	INT32 DownloadOverCostedNetwork,
	INT32 DownloadOverBattery,
	UINT32 MaximumNetworkWaitTimeMs,
	INT32 IsAsync
	);

UtcApiManager_IsEscalationRunning(
	GUID ScenarioId,
	INT32 IsRunning
	);

UtcApiManager_EscalateScenarioPathAsyncSuccess(
	UINT64 EscalationsStarted
	);

UtcApiManager_DownloadLatestSettingsForNamespace(
	VOID
	);

UtcApiManager_IsEscalationRunning(
	GUID ScenarioId
	);

UtcApiManager_EscalateScenarioPathSuccess(
	UINT32 EscalationsCompleted
	);

UtcApiManager_EscalateScenarioPathEscalationFailure(
	UINT32 EscalationsCompleted,
	UINT32 EscalationsExpected,
	UINT32 ScenariosFailedToStart,
	UINT64 ScenariosRequested
	);

UtcApiManager_EscalateScenarioPathAsyncEscalationFailure(
	UINT32 ScenariosFailedToStart,
	UINT64 ScenariosRequested
	);

UtcApiManager_EscalateScenarioPathEscalationsStillPending(
	UINT32 EscalationsCompleted,
	UINT32 EscalationsExpected,
	UINT32 ScenariosFailedToStart,
	UINT64 ScenariosRequested
	);

UtcApiManager_EscalateScenarioPathNoScenariosEscalated(
	VOID
	);

UtcApiManager_EscalateScenarioOnCompleteLambdaCount(
	UINT32 EscalationsCompleted,
	UINT32 EscalationsExpected,
	INT32 HRESULT,
	GUID ScenarioId,
	GUID InstanceId
	);

UtcApiManager_EscalateScenarioOnCompleteLambda(
	VOID
	);

MatchEngine_ScenarioApiCompleted_4(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	COUNTEDSTRING ScenarioName,
	UINT32 CurrentCompletionReports,
	UINT32 MaxCompletionReports,
	UINT32 CurrentCancelReports,
	UINT32 MaxCancelReports,
	UINT32 CurrentFailureReports,
	UINT32 MaxFailureReports,
	UINT32 CurrentCompletionEscalations,
	UINT32 MaxCompletionEscalations,
	UINT32 CurrentFailureEscalations,
	UINT32 MaxFailureEscalations,
	UINT8 SinkStateOrdinal,
	COUNTEDSTRING PerfTrackScenarioName,
	COUNTEDSTRING PerfTrackDurationField,
	UNICODESTRING Metadata_TimeSinceOsInstall,
	UNICODESTRING Metadata_LastBootTime,
	UNICODESTRING Metadata_IsAcOn,
	UNICODESTRING Metadata_IsEscalationInProgress,
	UNICODESTRING Metadata_IsKernelDebuggerPresent,
	UNICODESTRING Metadata_LastPowerSourceChangeTime,
	UNICODESTRING Metadata_LastAbnormalShutdownTime,
	UNICODESTRING Metadata_LastSuccessfulRefreshTime,
	UNICODESTRING Metadata_LastApplicationInstallTime,
	UNICODESTRING Metadata_LastUnlockTime,
	UNICODESTRING Metadata_LastLogonTime,
	UNICODESTRING Metadata_LastDeviceArrivalTime,
	UNICODESTRING Metadata_LastResumeFromHibernateTime,
	UNICODESTRING Metadata_LastResumeFromStandbyTime,
	UNICODESTRING Metadata_IsContinuumSessionActive,
	PORT TriggerInfo,
	UNICODESTRING Producer,
	UNICODESTRING identifyingInfo,
	UINT64 TimeStamp,
	UINT32 PID,
	UINT32 TID,
	GUID AID,
	UINT64 EventKey,
	STRING SelectField,
	UNICODESTRING Spec,
	UNICODESTRING Value
	);

UtcApiManager_EscalateScenarioImpl(
	GUID ScenarioId,
	BOOLEAN IsAsync
	);

UtcApiManager_EscalateScenarioImpl(
	GUID ScenarioId
	);

UtcApiManager_IsScenarioActive(
	GUID ScenarioId
	);

UtcApiManager_IsScenarioActive(
	GUID ScenarioId,
	INT32 IsActive
	);

UtcApiManager_UnloadExporter(
	VOID
	);

UtcApiManager_UnloadExporters(
	VOID
	);

UtcApiManager_UnloadExporter(
	UNICODESTRING ExporterName
	);

UtcApiManager_LoadExporter(
	UNICODESTRING ExporterName
	);

UtcApiManager_LoadExporter(
	VOID
	);

UtcApiManager_UnloadExporters(
	VOID
	);

UtcApiManager_LoadExporters(
	VOID
	);

UtcApiManager_LoadExporters(
	VOID
	);

UtcApiManager_SnapMiniTrace_OutputDirectoryAlreadyExists(
	VOID
	);

UtcApiManager_SnapMiniTrace(
	UNICODESTRING outputDirectory
	);

UtcApiManager_SnapMiniTrace(
	UNICODESTRING outputDirectory
	);

SettingsDownloader_FinishDownload(
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	UNICODESTRING Headers,
	INT32 ErrorCode,
	UINT64 DownloadDurationMs,
	INT64 OnDiskFileSizeBytes
	);

SettingsDownloader_SnapRingInfo(
	INT32 OverallHr,
	UNICODESTRING RingName,
	INT32 RingNameHr,
	UINT32 RingId,
	INT32 RingIdHr,
	UNICODESTRING BranchName,
	INT32 BranchNameHr
	);

Utils_UrlEscapeStringSucceeded(
	UNICODESTRING sourceString,
	UNICODESTRING escapedString
	);

Utils_UrlEscapeStringFailed(
	UNICODESTRING sourceString,
	INT32 hresult
	);

SettingsManager_AzureHostModeSkipOneSettingsDownload(
	COUNTEDSTRING partner,
	COUNTEDSTRING feature
	);

SettingsManager_SkipETagSinceQueryParametersChanged(
	COUNTEDSTRING partner,
	COUNTEDSTRING feature
	);

PublicNLMSink_ConnectivityChanged(
	UINT32 NLMConnectivity,
	BOOL32 IsNetworkConnected
	);

IAgentIoReceiver_CopyAgentDiagnostics(
	UNICODESTRING EscalationDataPath,
	UINT32 BytesRemaining,
	UINT32 BytesWritten
	);

IAgentIoReceiver_SetEscalationSyncEvent(
	HEXINT64 EscalationSyncEvent
	);

IAgentIoReceiver_UnregisterEscalationDataRequest(
	UNICODESTRING RequestId
	);

IAgentIoReceiver_RegisterEscalationDataRequest(
	UNICODESTRING RequestId
	);

IAgentIoReceiver_CreateAgentDiagnosticsFile(
	UNICODESTRING EscalationDataPath
	);

IAgentIoReceiver_EscalationPayloadReceived(
	GUID ScenarioInstanceId,
	COUNTEDSTRING AgentId,
	INT32 AgentEscalationResult,
	UINT64 EscalationDataSize
	);

IAgentIoReceiver_SendFile(
	GUID TransferId,
	UNICODESTRING FilePath,
	INT64 FileSize
	);

IAgentIoReceiver_SendFileChunk(
	GUID TransferId,
	UNICODESTRING FileName,
	UINT32 BytesRemaining,
	UINT32 ChunkSize
	);

IAgentIoReceiver_SendFile(
	GUID TransferId,
	UNICODESTRING FilePath,
	INT64 FileSize
	);

AgentTransport_ThreadpoolIoCompleted(
	HEXINT64 OverlappedAddress,
	UINT32 IoResult,
	UINT64 BytesTransferred
	);

AgentTransport_IgnoreIoCallbackWhenDisconnecting(
	HEXINT64 OverlappedAddress,
	UINT32 IoResult,
	UINT64 BytesTransferred
	);

AgentTransport_Disconnect(
	UINT64 SocketHandle
	);

AgentTransport_IgnoreSendRequestWhenDisconnecting(
	VOID
	);

AgentTransport_LinuxSocketListening(
	UINT64 SocketHandle
	);

AgentTransport_ListenerLinuxSocketConnectedSuspendSocketOptionSet(
	VOID
	);

AgentTransport_IgnoreReceiveRequestWhenDisconnecting(
	VOID
	);

AgentTransport_IgnoreAcceptRequestWhenDisconnecting(
	VOID
	);

AgentTransport_ListenerSocketConnectedSuspendSocketOptionSet(
	VOID
	);

AgentTransport_ListenModeWindowsHyperVSocket(
	VOID
	);

AgentTransport_ListenModeLinuxHyperVSocket(
	VOID
	);

AgentTransport_SocketListening(
	UINT64 SocketHandle
	);

AgentTransport_ListenModeTest(
	UNICODESTRING TestSocketAddress
	);

AgentTransport_ConnectModeHyperVSocket(
	VOID
	);

AgentTransport_ConnectModeTest(
	UNICODESTRING TestSocketAddress
	);

AgentTransport_ThreadpoolIoStarted(
	HEXINT64 OverlappedAddress,
	UINT64 Socket,
	UINT8 IoRequestType
	);

AgentTransport_ThreadpoolIoCancelled(
	HEXINT64 OverlappedAddress
	);

AgentTransport_IoCallbacksComplete(
	UINT64 Socket
	);

AgentTransport_ResetSocket(
	UINT64 Socket
	);

EventSignature_SignatureData(
	UNICODESTRING HexHash,
	COUNTEDSTRING FullName,
	GUID GetProviderId,
	GUID GetGroupId,
	UINT8 GetCategory,
	BOOLEAN IsCoreData,
	BOOLEAN IsMarkedAsPii,
	UNICODESTRING PartCFields,
	COUNTEDSTRING PartBName
	);

AgentManager_SuccessfullyUploadedWatsonCab(
	UNICODESTRING EscalationDataPath,
	UNICODESTRING EventName,
	UNICODESTRING WerReportIdStr
	);

AgentManager_ReceivedMetadata(
	INT32 XmlMetadataHr,
	ANSISTRING XmlMetadata
	);

AgentManager_CopyWatsonCrash(
	UNICODESTRING WatsonCrashPath,
	UINT32 BytesRemaining,
	UINT32 BytesWritten
	);

AgentManager_WatsonCrashPayloadReceived(
	COUNTEDSTRING CrashId,
	COUNTEDSTRING MetadataFileName,
	UINT32 ZipFileSize,
	UINT64 EventPayloadSize
	);

AgentManager_RequestFailed(
	UNICODESTRING WatsonCrashPath
	);

AgentManagerCrashRegistered(
	COUNTEDSTRING RequestId
	);

WERLoggerBase_SendReport(
	GUID WerReportId,
	INT32 SubmitResult,
	UINT32 reportResult
	);

WERLogger_AddFileToCAB(
	COUNTEDSTRING SourcePath,
	COUNTEDSTRING DestinationPath,
	INT32 HRESULT
	);

WERLogger_ReportSubmit(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT32 ReportResult,
	INT32 HRESULT,
	BOOLEAN Consent
	);

WERLogger_ReadyToSubmit(
	VOID
	);

MSAUserIdentityProvider_CachePopulateResult(
	COUNTEDSTRING SID,
	UINT32 StorageBufferType,
	UNICODESTRING IdentityString,
	UINT32 Type,
	COUNTEDSTRING RequestedAccountId,
	UNICODESTRING ReturnedAccountId,
	HRESULT LastQueryResult,
	UINT64 LastQueryFiletime,
	UINT8 BackoffIndex,
	UINT64 BackoffFiletime
	);

MSAUserIdentityProvider_SuccessfulCache_Requery_LastFailureExpired(
	UINT8 BackoffIndex
	);

MSAUserIdentityProvider_SuccessfulCacheHit_NoRequery_CachedUnexpiredError_Failure(
	INT32 LastQueryResult,
	UINT8 BackoffIndex
	);

MSAUserIdentityProvider_SuccessfulCacheHit_Requery_ExpiredCacheHit(
	VOID
	);

MSAUserIdentityProvider_SuccessfulCacheHit_NoRequery_ReturnCachedValue_Success(
	UNICODESTRING IdentityString
	);

MSAUserIdentityProvider_SuccessfulCacheHit_NoRequery_NoApiPresent_Failure(
	VOID
	);

MSAUserIdentityProvider_NoCacheHit_Requery(
	VOID
	);

MSAUserIdentityProvider_ValidatingCacheEntry(
	COUNTEDSTRING SID,
	UINT32 IdentityType,
	UINT32 EndpointTypeIndex,
	COUNTEDSTRING AccountId,
	BOOLEAN UsingSecondaryMap
	);

MSAUserIdentityProvider_SkippingCacheDueToTestHook_Requery(
	VOID
	);

MsaUserTicketUserIdentity_CreateRequest(
	UNICODESTRING Scope,
	UNICODESTRING MsaClientIdStr,
	UINT8 RemoveSsoAppGroup,
	UNICODESTRING MsaApiVersion
	);

MsaUserTicketUserIdentity_EmptyTicketTargetUrl(
	VOID
	);

MsaUserSpecificDeviceTicketUserIdentity_EmptyTargetTicketUrl(
	VOID
	);

AppIdMetadata_RegisterProcessNotificationReceiver(
	COUNTEDSTRING RegistrantName,
	HEXINT64 RegistrantAddress
	);

AppIdMetadata_UnregisterProcessNotificationReceiver(
	COUNTEDSTRING RegistrantName,
	HEXINT64 RegistrantAddress
	);

AppIdMetadata_UnknownModernAppPublisher(
	COUNTEDSTRING ImagePath,
	UNICODESTRING PackageName,
	UNICODESTRING ExtractedPublisherId
	);

AppIdMetadata_UnknownDesktopAppPublisher(
	COUNTEDSTRING ImagePath,
	UNICODESTRING CompanyName
	);

AppIdMetadata_FailedPicRetrieveFileInfo(
	COUNTEDSTRING GlobalFilePath,
	INT32 FailureHResult
	);

WerUploadTimesMetadata_Update(
	UINT64 TickCount
	);

MetadataFactory_CreateMetadata(
	COUNTEDSTRING Type
	);

LastBootTimeMetadata_Update(
	UINT64 LastBootTime
	);

LastBootTimeMetadata_Query(
	UINT64 LastBootTime
	);

IsACOnMetadata_Update(
	UINT8 IsACOn
	);

IsACOnMetadata_Query(
	UINT8 IsACOn
	);

IsEscalationInProgressMetadata_Update(
	BOOLEAN IsEscalationInProgress
	);

IsEscalationInProgressMetadata_Query(
	BOOLEAN IsEscalationInProgress
	);

IsKernelDebuggerPresentMetadata_Update(
	BOOLEAN IsKernelDebuggerPresent
	);

IsKernelDebuggerPresentMetadata_Query(
	BOOLEAN IsKernelDebuggerPresent
	);

LastPowerSourceChangeTimeMetadata_Update(
	UINT64 LastPowerSourceChangeTime,
	UNICODESTRING IsLastPowerSourceAC
	);

LastPowerSourceChanceTimeMetadata_Query(
	UINT64 LastPowerSourceChangeTime,
	UNICODESTRING IsLastPowerSourceAC
	);

BuildStringMetadata_Update(
	UNICODESTRING BuildString
	);

BuildStringMetadata_Query(
	UNICODESTRING BuildString
	);

TimeSinceOSInstallMetadata_Query(
	UINT64 TimeSinceOSInstall
	);

TimeSinceOSInstallMetadata_Update(
	UINT64 TimeSinceOSInstall
	);

LastSuccessfulRefreshTimeMetadata_Update(
	UINT64 LastSuccessfulRefreshTime
	);

LastSuccessfulRefreshTimeMetadata_Query(
	UINT64 LastSuccessfulRefreshTime
	);

LastApplicationInstallTimeMetadata_Update(
	UINT64 LastApplicationInstallTime
	);

LastApplicationInstallTimeMetadata_Query(
	UINT64 LastApplicationInstallTime
	);

LastUnlockTimeMetadata_Update(
	UINT64 LastUnlockTime
	);

LastUnlockTimeMetadata_Query(
	UINT64 LastUnlockTime
	);

LastLogonTimeMetadata_Update(
	UINT64 LastLogonTime
	);

LastLogonTimeMetadata_Query(
	UINT64 LastLogonTime
	);

LastDeviceArrivalTimeMetadata_Update(
	UINT64 LastDeviceArrivalRemovalTime
	);

LastDeviceArrivalTimeMetadata_Query(
	UINT64 LastDeviceArrivalRemovalTime
	);

LastResumeFromHibernateTimeMetadata_Update(
	UINT64 LastResumeFromHibernateTime
	);

LastResumeFromHibernateTimeMetadata_Query(
	UINT64 LastResumeFromHibernateTime
	);

LastResumeFromStandbyTimeMetadata_Update(
	UINT64 LastResumeFromStandbyTime
	);

LastResumeFromStandbyTimeMetadata_Query(
	UINT64 LastResumeFromStandbyTime
	);

IsContinuumSessionActiveMetadata_Update(
	BOOLEAN IsContinuumActive
	);

IsContinuumSessionActiveMetadata_Query(
	BOOLEAN IsContinuumActive
	);

IdleDetectorMetadata_Query(
	UINT64 AccumulatedIdleTime
	);

IdleDetector_AccumulatedIdleTimeUpdateEventSet(
	UINT64 AccumulatedIdleTime
	);

IdleDetector_AbortIdleDetectorUpdateEventSet(
	VOID
	);

GetAgentDiagnosticsActionDef_ContainerActivityNotificationCallback(
	INT32 Result,
	UNICODESTRING AgentId
	);

GetAgentDiagnosticsActionDef_ContainerNotificationCallback(
	UINT8 Notification,
	UNICODESTRING AgentId
	);

ScenarioStateModelInst_GetLowerBoundMemorySizeEstimate(
	HEXINT64 ScenarioStateModelInstAddress,
	UINT64 EstimatedSize
	);

ScenarioStateModel_SkipAnachronisticTrigger(
	COUNTEDSTRING EventName,
	COUNTEDSTRING TransitionName,
	BOOLEAN IsAgentEvent,
	UINT64 TriggerTime,
	UINT64 PreviousHostTriggerTime,
	UINT64 PreviousAgentTriggerTime
	);

ScenarioInst_GetLowerBoundMemorySizeEstimate(
	HEXINT64 ScenarioInstAddress,
	UINT64 EstimatedSize
	);

ScenarioInst_GetImpersonationSecurityId(
	BOOLEAN IsInstanceStateModelNullptr
	);

SnapTrace_SnappingScenarioInformation(
	GUID ScenarioId,
	UINT64 Duration,
	BOOLEAN DurationIsQuestionable,
	PORT TriggerInfo,
	UNICODESTRING Producer,
	UNICODESTRING identifyingInfo,
	UINT64 TimeStamp,
	UINT32 PID,
	UINT32 TID,
	GUID AID,
	UINT64 EventKey,
	GUID ScenarioInstanceId
	);

Utils_EscalationReasonETWTrigger(
	GUID ProviderId,
	UINT64 Timestamp,
	UINT32 EventId,
	UINT32 EventVersion
	);

ScenarioInst_TraceSnapEventAlreadySerialized(
	VOID
	);

InFlightScenario_InSinkState(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT64 CompletedTime
	);

InFlightScenario_UnmatchedTrigger(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UNICODESTRING Trigger,
	ANSISTRING TriggerValues
	);

InFlightScenario_MatchedTrigger(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UNICODESTRING Trigger,
	ANSISTRING TriggerValues
	);

InFlightScenario_TransitionTaken(
	COUNTEDSTRING TransitionName,
	UINT8 SourceState,
	UINT8 NewState,
	GUID ScenarioId,
	GUID ScenarioInstanceId
	);

InFlightScenario_ExpandPropertyIdentifier_ExpandingIdentifier(
	COUNTEDSTRING TransitionName,
	COUNTEDSTRING PropertyName,
	UNICODESTRING Value
	);

OsUtils_GetCommandLineForPids_InvalidProcessHandle(
	UINT32 pid
	);

InFlightScenario_ExpandTimeBetweenToken_UnableToRetrieveTransitionTriggersForHash(
	COUNTEDSTRING TimeBetweenDescriptor
	);

InFlightScenario_ExpandTimeBetweenToken_InvalidTriggerPartialDuration(
	COUNTEDSTRING TimeBetweenDescriptor
	);

InFlightScenario_ExpandTimeBetweenToken_InvalidTimeBetweenIdentifier(
	COUNTEDSTRING TimeBetweenDescriptor
	);

InFlightScenario_ExpandTimeBetweenToken_InvalidIdenticalTimeBetweenIdentifier(
	COUNTEDSTRING TimeBetweenDescriptor
	);

InFlightScenario_ExpandPropertyIdentifier(
	COUNTEDSTRING OriginalString,
	UNICODESTRING ExpandedString
	);

InFlightScenario_ExpandTimeBetweenTokenFailed_InvalidScenarioInstanceStateModel(
	COUNTEDSTRING TimeBetweenDescriptor
	);

InFlightScenario_ExpandPropertyIdentifier_ExpandingCustomIdentifier(
	UNICODESTRING Key,
	UNICODESTRING Value
	);

MatchEngine_GetInflightScenarioLowerBoundMemorySizeEstimate_UniqueMatchedTrigger(
	HEXINT64 TriggerAddress,
	UINT64 EstimatedTriggerSize
	);

MatchEngine_GetInflightScenarioLowerBoundMemorySizeEstimate(
	GUID ScenarioId,
	UINT64 EstimatedSize
	);

MatchEngine_ManifestUpdateMaintainScenarioList(
	GUID ScenarioId
	);

MatchEngine_CompletedManifestUpdate(
	VOID
	);

MatchEngine_ManifestUpdatePruneScenarioList(
	GUID ScenarioId
	);

MatchEngine_StartManifestUpdate(
	VOID
	);

MatchEngine_DrainStatistics(
	UINT64 RemainingEvents,
	UINT32 DrainCounter,
	UINT64 DrainTimeoutMillis,
	UINT64 DrainTimeMillis,
	BOOLEAN DrainCancelled
	);

MatchEngine_Start(
	VOID
	);

MatchEngine_ScenarioCompleted_4(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	COUNTEDSTRING ScenarioName,
	UINT64 ScenarioDurationMs,
	UINT64 IsDurationQuestionable,
	UINT32 CurrentCompletionReports,
	UINT32 MaxCompletionReports,
	UINT32 CurrentCancelReports,
	UINT32 MaxCancelReports,
	UINT32 CurrentFailureReports,
	UINT32 MaxFailureReports,
	UINT32 CurrentCompletionEscalations,
	UINT32 MaxCompletionEscalations,
	UINT32 CurrentFailureEscalations,
	UINT32 MaxFailureEscalations,
	UINT8 SinkStateOrdinal,
	COUNTEDSTRING PerfTrackScenarioName,
	COUNTEDSTRING PerfTrackDurationField,
	UNICODESTRING Metadata_TimeSinceOsInstall,
	UNICODESTRING Metadata_LastBootTime,
	UNICODESTRING Metadata_IsAcOn,
	UNICODESTRING Metadata_IsEscalationInProgress,
	UNICODESTRING Metadata_IsKernelDebuggerPresent,
	UNICODESTRING Metadata_LastPowerSourceChangeTime,
	UNICODESTRING Metadata_LastAbnormalShutdownTime,
	UNICODESTRING Metadata_LastSuccessfulRefreshTime,
	UNICODESTRING Metadata_LastApplicationInstallTime,
	UNICODESTRING Metadata_LastUnlockTime,
	UNICODESTRING Metadata_LastLogonTime,
	UNICODESTRING Metadata_LastDeviceArrivalTime,
	UNICODESTRING Metadata_LastResumeFromHibernateTime,
	UNICODESTRING Metadata_LastResumeFromStandbyTime,
	UNICODESTRING Metadata_IsContinuumSessionActive,
	UNICODESTRING Metadata_AccumulatedIdleTime,
	PORT TriggerInfo,
	UNICODESTRING Producer,
	UNICODESTRING identifyingInfo,
	UINT64 TimeStamp,
	UINT32 PID,
	UINT32 TID,
	GUID AID,
	UINT64 EventKey,
	STRING SelectField,
	UNICODESTRING Spec,
	UNICODESTRING Value
	);

EscalationEngine_ExecuteDenied(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT32 HRESULT
	);

MatchEngine_ScenarioCycled(
	GUID ScenarioId,
	COUNTEDSTRING ScenarioName,
	GUID ScenarioInstanceId
	);

MatchEngine_ScenarioAgeOut(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	INT32 Reason,
	UINT32 MaxDurationMs
	);

MatchEngine_ScenarioInstanceIdFromTrigger(
	GUID ScenarioId,
	UNICODESTRING InstanceIdValue,
	INT32 HRESULT
	);

MatchEngine_WatchdogEventReceived(
	VOID
	);

MatchEngine_ProcessEvent(
	UNICODESTRING TriggerToString
	);

ScenarioManager_UpdateAuthorizationComplete(
	VOID
	);

ScenarioManager_DumpTriggerSettings(
	UNICODESTRING Namespace,
	UINT64 Category,
	DOUBLE SampleRate,
	INT8 Latency,
	INT8 Persistence,
	UINT64 CloudCategory,
	BOOLEAN RemoveCoreDataAttribute
	);

ScenarioManager_AuthorizationUpdateRules(
	VOID
	);

AppIdMetadata_HasAccountPrefix_PrefixKnownType(
	COUNTEDSTRING SID
	);

AppIdMetadata_HasAccountPrefix_LsaKnownType(
	COUNTEDSTRING SID,
	UINT32 AccountType
	);

AppIdMetadata_HasAccountPrefix_LsaUnknownType(
	COUNTEDSTRING SID
	);

AppIdMetadata_HasAccountPrefix_PrefixUnknownType(
	COUNTEDSTRING SID
	);

DiagTrack_Rundown_ScenarioManager_KnownScenarios(
	GUID ScenarioId,
	UNICODESTRING ScenarioName,
	UINT8 ActivityState,
	UINT64 ScenarioFlags
	);

DiagTrack_Rundown_ScenarioManager(
	VOID
	);

DiagTrack_Rundown_ScenarioManager(
	VOID
	);

ScenarioManager_FailedToReadParseStateFile(
	VOID
	);

Filter_FilterEvaulated(
	COUNTEDSTRING FilterName,
	UINT32 IsSatisfied,
	UINT32 HRESULT,
	UINT32 FromCache,
	UNICODESTRING FilterRepresentation
	);

ScenarioManager_RejectScenario(
	GUID ScenarioId,
	COUNTEDSTRING ScenarioName,
	UINT32 Reason
	);

ScenarioManager_UpdateSettingsTimer_InitialConfiguration(
	UINT32 InitialDelay
	);

ScenarioManager_UpdateSettingsTimer(
	UINT32 DefaultTimeoutMillis,
	UINT32 OnBatteryTimeoutMillis,
	UINT32 OnCostedNetworkTimeoutMillis,
	UINT32 InConnectedStandbyTimeoutMillis
	);

ScenarioManager_UpdateSettingsTimer_CoreTelemetryDisabled(
	UINT32 CoreTelOptedOutMillis
	);

ScenarioManager_SoftLandingSignatureValidationFailed(
	COUNTEDSTRING FileName
	);

ScenarioManager_SoftLandingSignatureValidationSucceeded(
	COUNTEDSTRING FileName
	);

ScenarioManager_SoftLandingSignatureValidationSkipped(
	COUNTEDSTRING FileName
	);

ScenarioManager_AcceptScenario(
	GUID ScenarioId,
	COUNTEDSTRING ScenarioName,
	ANSISTRING SSVVersion
	);

ScenarioManager_RejectScenario(
	GUID ScenarioId,
	COUNTEDSTRING ScenarioName,
	UINT32 Reason
	);

ScenarioManager_InvalidScenario(
	GUID ScenarioId,
	UINT32 HRESULT
	);

ScenarioManager_AcceptProviderSettingFromGroup(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Category
	);

ScenarioManager_SkippingProviderForwarder_OptedOut(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Keyword
	);

ScenarioManager_AcceptProviderSetting(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Category
	);

ScenarioManager_ShowingSampledOutEvent(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Keyword,
	UNICODESTRING NamespaceType,
	GUID GroupId,
	DOUBLE EffectiveSampleRate,
	DOUBLE MachineSampleNumber
	);

ScenarioManager_SkippingProviderSettingFromGroup_OptedOut(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Category
	);

ScenarioManager_AcceptGroupSetting(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Category
	);

ScenarioManager_SkippingProviderForwarder_ProviderAndGroupIdConflict(
	UNICODESTRING SettingTargetNamespace,
	GUID ConflictingProviderId
	);

ScenarioManager_SkippingProviderGroupForwarder_OptedOut(
	GUID GroupId,
	UINT64 Keyword
	);

ScenarioManager_SkippingIndividualEventSetting_InvalidProviderName(
	UNICODESTRING ProviderName
	);

ScenarioManager_SkippingIndividualEventSetting_ProviderAndGroupIdConflict(
	UNICODESTRING SettingTargetNamespace,
	GUID ConflictingProviderId
	);

ScenarioManager_AcceptIndividualEventSetting(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Category
	);

ScenarioManager_SkippingIndividualEventSetting_OptedOut(
	UNICODESTRING SettingTargetNamespace,
	UINT64 Keyword
	);

ScenarioManager_SkippingIndividualEventSetting_SampledOut(
	UNICODESTRING SettingTargetNamespace,
	DOUBLE EventSampleRate,
	DOUBLE EffectiveSampleRate,
	DOUBLE MachineSampleNumber
	);

ScenarioManager_SkippingIndividualEventSetting_NoProviderSpecified(
	UNICODESTRING SettingTargetNamespace
	);

ScenarioManager_SkippingIndividualEventSetting_InvalidCategorySize(
	UNICODESTRING SettingTargetNamespace,
	UINT64 NumCategories
	);

ScenarioManager_SkippingIndividualEventSetting_InvalidCategory(
	UNICODESTRING SettingTargetNamespace
	);

ScenarioManager_ProviderGroupOptedOutForAllData(
	GUID GroupId,
	UNICODESTRING SettingTargetNamespace
	);

ScenarioManager_DisableSoftLanding_SkippingSoftLandingDirectory(
	VOID
	);

ScenarioManager_OtherScenarioTypes_NotAuthorized(
	VOID
	);

ScenarioManager_LoadUifScenariosBelowFull(
	VOID
	);

ScenarioManager_LoadSiufScenariosBelowFull(
	VOID
	);

ScenarioManager_LoadUtcDerivedScenariosBelowFull(
	VOID
	);

ScenarioManager_SkipLoadingOneSettingsScenarios_NotAuthorized(
	UNICODESTRING Endpoint
	);

ScenarioManager_LoadingScenarioFileStop(
	COUNTEDSTRING FileName,
	INT32 HRESULT
	);

ScenarioManager_InvalidScenarioFileName(
	UNICODESTRING fileName
	);

ScenarioManager_GetActionableScenariosByTrigger_UnmatchedTriggerSource(
	COUNTEDSTRING TriggerName,
	BOOLEAN TriggerIsAgentEvent,
	GUID ScenarioId
	);

ScenarioManager_ApiUpdateRules(
	VOID
	);

ScenarioManager_NewUserUpdateRules(
	VOID
	);

ScenarioManager_SoftLandingCampaignChangeUpdateRules(
	VOID
	);

ScenarioManager_RefreshUpdateRules(
	VOID
	);

ScenarioManager_SideloadUpdateRules(
	VOID
	);

ScenarioManager_InitialTraceSetup(
	VOID
	);

ScenarioManager_RuleUpdateThreadWaitingForChanges(
	VOID
	);

ScenarioManager_InitialUpdateRules(
	VOID
	);

ScenarioManager_ActiveSideloadFiles(
	UNICODESTRING Files
	);

AsimovUploader_ForceRegionRefresh(
	VOID
	);

ScenarioManager_LoadingScenariosStop(
	VOID
	);

ScenarioManager_SkipEnablingForwardersFromSettings(
	VOID
	);

ScenarioManager_FinishUpdateRules(
	VOID
	);

ScenarioManager_UpdateRulesDelay(
	UINT32 DelayMillis
	);

ScenarioManager_LoadingScenariosStart(
	VOID
	);

ScenarioManager_ClearRules(
	VOID
	);

EscalationEngine_Execute(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT8 ActionType
	);

EscalationEngine_Execute_AzureProfilerDenied(
	GUID ScenarioId,
	UINT8 ActionType
	);

EscalationEngine_ScenarioEscalationRunningAtShutdown(
	GUID ScenarioId,
	GUID ScenarioInstanceId
	);

EscalationEngine_FinishAllPendingWork(
	VOID
	);

ScenarioObjectCache_LoadingObjectFromCache(
	UINT64 ObjectHash,
	UINT16 ScenarioDbObjectType
	);

ScenarioObjectCache_LoadingObjectFromSql(
	UINT64 ObjectHash,
	UINT16 ScenarioDbObjectType
	);

DTraceManager_Disabled_Velocity(
	VOID
	);

DTraceManager_OnScenarioScriptDataAdded(
	GUID ScenarioId,
	UINT64 TargetingRuleCount,
	UINT64 DbKeyHash
	);

DTraceManager_OnScenarioScriptDataRemoved(
	GUID ScenarioId,
	UINT64 TargetingRuleCount,
	UINT64 DbKeyHash
	);

DTraceManager_Disabled_MissingDTraceExe(
	VOID
	);

DTraceManager_AddNewDTraceProcessToScenarioScriptData(
	GUID ScenarioId,
	UINT64 TargetingRuleCount,
	UINT64 DbKeyHash,
	UINT32 ProcessId
	);

DTraceManager_LookupProcessInfo_Succeeded(
	UINT32 ProcessId,
	UNICODESTRING ProcessName
	);

DTraceManager_InitializedProcesses(
	UINT64 ProcessesCount
	);

DTraceManager_LookupProcessInfo_FailedToOpenHandle(
	UINT32 ProcessId,
	INT32 HRESULT
	);

DTraceManager_LookupProcessInfo_FailedToGetFileName(
	UINT32 ProcessId,
	INT32 HRESULT
	);

DTraceManager_OnProcessDestroyed_DestoryingProcess(
	GUID ScenarioId,
	UINT64 TargetingRuleCount,
	UINT64 DbKeyHash,
	UINT32 ProcessId
	);

DTraceManager_OnProcessCreated(
	UINT32 ProcessId
	);

DTraceManager_OnProcessDestroyed(
	UINT32 ProcessId
	);

DTraceManager_AddScript(
	GUID ScenarioId,
	UINT8 Destination,
	UINT64 TargetingRuleCount,
	UINT64 DbKeyHash
	);

DTraceManager_OnEndScenarioParsing(
	UINT64 AddedCount,
	UINT64 AddedToBeMessagedCount,
	UINT64 RemovedCount,
	UINT64 RemovedToBeMessagedCount
	);

DTraceManager_OnBeginScenarioParsing(
	VOID
	);

ValidateOpenSqlConnection_Failed(
	INT32 SqliteFileControlErrorCode,
	INT32 LastError
	);

FailedSQLiteOperation_sqlite3_close(
	INT32 ErrorCode,
	ANSISTRING ErrorCodeStr
	);

DiagTrack_Rundown_ScenariosSqliteTable_SqlScenarioObject(
	UINT64 Hash,
	ANSISTRING Type,
	COUNTEDANSISTRING Json
	);

DiagTrack_Rundown_ScenariosSqliteTable(
	VOID
	);

DiagTrack_Rundown_ScenariosSqliteTable(
	VOID
	);

SQLiteConnection_Vacuum(
	VOID
	);

Sqlite_CommitIfTransactionStarted(
	ANSISTRING ErrorMessage
	);

SQLiteTransaction_RollbackDetected(
	UNICODESTRING m_databaseDirectory.c_str()
	);

Sqlite_TryBeginTransaction(
	ANSISTRING ErrorMessage
	);

ScenariosSqliteTable_DeletingObjectFromSql(
	UINT16 Type,
	UINT64 Hash
	);

ScenariosSqliteTable_PrepareForFailFastAt(
	COUNTEDSTRING location
	);

ScenariosSqliteTable_BeginReset(
	ANSISTRING ResetType
	);

FailedSQLiteOperation_sqlite3_finalize(
	INT32 ErrorCode,
	ANSISTRING ErrorCodeStr
	);

SQLiteOOMFailure(
	ANSISTRING ErrorCodeStr,
	BOOL32 IsTestMachine
	);

SQLiteDbOrDiskFull(
	ANSISTRING ErrorCodeStr
	);

FailedSQLiteOperation(
	INT32 ErrorCode,
	ANSISTRING ErrorCodeStr,
	COUNTEDSTRING DatabasePath
	);

ScenarioObjectCache_SerializeObject(
	UINT64 ObjectHash,
	ANSISTRING ScenarioDbObjectType
	);

ScenarioStorageSql_SkipLoadingObjectForParse(
	UINT16 Type,
	UINT64 Hash
	);

ScenarioStorageSql_RemoveRefScenarioObject(
	GUID ScenarioId,
	UINT64 ScenarioIdHash,
	ANSISTRING ScenarioObjectType,
	UINT64 ScenaroObjectHash
	);

ScenarioStorageSql_DeleteSelfDiagTrace(
	ANSISTRING ScenarioObjectType,
	UINT64 ScenaroObjectHash
	);

ScenarioStorageSql_RemoveScenarioByHash(
	GUID ScenarioId,
	UINT64 NumScenarioObjects,
	UINT64 ScenarioIdHash
	);

ScenarioStorageSql_DeleteMiniSlotTrace(
	ANSISTRING ScenarioObjectType,
	UINT64 ScenaroObjectHash
	);

ScenarioStorageSql_IgnoringScenarioFromOtherFile(
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	UINT64 ScenarioIdHash,
	UINT64 NamespaceHash,
	BOOLEAN IsSideload,
	BOOLEAN IsSoftLanding
	);

ScenarioStorageSql_LoadScenarioFromSql(
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	GUID ScenarioId,
	UINT64 NamespaceHash
	);

ScenarioStorageSql_ProcessScenariosFromXmlAndSql(
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	COUNTEDSTRING FileName,
	UINT64 NamespaceHash,
	UINT64 ExistingScenarioObjectsInSql
	);

ScenarioStorageSql_ProcessScenariosFromSqlOnly(
	COUNTEDSTRING Partner,
	COUNTEDSTRING Feature,
	COUNTEDSTRING FileName,
	UINT64 NamespaceHash,
	UINT64 ExistingScenarioObjectsInSql
	);

TraceProfileFactory_CreateEscalationAction(
	ANSISTRING Type
	);

EscalationWorkItem_SendEscalationRequestToAgent(
	UNICODESTRING AgentId,
	GUID ScenarioId,
	GUID ScenarioInstanceId
	);

EscalationWorkItem_FailedToSendEscalationRequestToAgent(
	UNICODESTRING AgentId,
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	BOOLEAN IgnoreFailure,
	INT32 ErrorCode
	);

EscalationWorkItem_NoTargetAgentsFound(
	GUID ScenarioInstanceId,
	COUNTEDSTRING ActionName,
	UINT8 ActionDestination,
	COUNTEDSTRING ActionDestinationId
	);

EscalationWorkItem_ActionDestinationAgent(
	GUID ScenarioInstanceId,
	COUNTEDSTRING ActionName,
	UNICODESTRING AgentId
	);

EscalationWorkItem_FailedToSerializeAgentAction(
	COUNTEDSTRING ActionName,
	BOOLEAN IgnoreFailure
	);

EscalationWorkItem_ActionTargetsAgent(
	GUID ScenarioInstanceId,
	COUNTEDSTRING ActionName,
	UINT8 ActionDestination,
	COUNTEDSTRING ActionDestinationId
	);

EscalationWorkItem_AgentEscalationRequestAction(
	COUNTEDSTRING ActionName,
	ANSISTRING ActionType,
	UNICODESTRING ActionInfo
	);

EscalationWorkItem_AgentEscalationRequestDetails(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT64 MaxRuntimeMills
	);

EscalationWorkItem_EscalationSelfDiagnosisSucceeded(
	VOID
	);

EscalationWorkItem_NoSelfDiagnosisCabUpload(
	GUID ScenarioId,
	BOOLEAN DisableCabUploadByTestHook
	);

EscalationWorkItem_AttemptingScenarioSelfDiagnosis(
	VOID
	);

EscalationWorkItem_MoveDirectory(
	UNICODESTRING SrcPath,
	COUNTEDSTRING DestPath,
	UNICODESTRING ResolvedDestPath
	);

FileSystemUtils_GetFileSystemFlags(
	COUNTEDSTRING Path,
	UNICODESTRING VolumePath,
	UINT32 FileSystemFlags
	);

FileSystemUtils_IntermediateCopyDirectoryNotAllowed(
	UNICODESTRING IntermediateDirectory,
	COUNTEDSTRING DestinationDirectory
	);

FileSystemUtils_GetDriveTypeForPath(
	COUNTEDSTRING Path,
	UNICODESTRING VolumePath,
	UINT32 DriveType
	);

FileSystemUtils_IsPathSuitableForEscalationOutput_DriveNotFixed(
	COUNTEDSTRING Path
	);

FileSystemUtils_IsPathSuitableForEscalationOutput_AclsNotSupported(
	COUNTEDSTRING Path
	);

FileSystemUtils_CheckForMatchingVolume(
	COUNTEDSTRING Path1,
	UNICODESTRING Path1Volume,
	UINT32 Path1SerialNumber,
	COUNTEDSTRING Path2,
	UNICODESTRING Path2Volume,
	UINT32 Path2SerialNumber
	);

RecursivelyDeleteDirectory_DeleteByHandleInvalidValidationHandle(
	UINT32 LastError
	);

RecursivelyDeleteDirectory_FailedToLockParentDirectory(
	UINT32 LastError
	);

EscalationWorkItem_CopyOutputDirectoryAlreadyExists(
	VOID
	);

EscalationWorkItem_NoImpersonationForCopyOutputDirectory(
	COUNTEDSTRING RpcClientSid,
	BOOLEAN MayImpersonate
	);

EscalationWorkItem_SkippingCopyOutputDirectory(
	VOID
	);

EscalationWorkItem_CopyOutputDirectoryPath(
	UNICODESTRING Path
	);

AzureProfiler_ReportSubmit_EscalationOutputMoveFailed(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	INT32 HRESULT
	);

AzureProfiler_ReportSubmit(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	INT32 HRESULT
	);

Utils_BreakFuse_SetFailed(
	INT32 HRESULT
	);

Utils_BreakFuse_Success(
	VOID
	);

Utils_BreakFuse_OpenFailed(
	INT32 HRESULT
	);

EscalationWorkItem_SkippingPreescalationChecksForUnmatchedDestination(
	COUNTEDSTRING ActionName
	);

EscalationWorkItem_RunningPreescalationChecks(
	COUNTEDSTRING ActionName
	);

EscalationWorkItem_SkippingPreescalationChecksDueToIgnoreFailure(
	COUNTEDSTRING ActionName
	);

EscalationWorkItem_ExecutedAction(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	COUNTEDSTRING ActionName,
	UINT32 HRESULT,
	UNICODESTRING ActionString
	);

EscalationWorkItem_SkippingActionWithUnmatchedDestination(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	COUNTEDSTRING ActionName,
	BOOLEAN IsAgent,
	ANSISTRING ActionDestination
	);

EscalationWorkItem_NoCabUpload(
	GUID ScenarioId,
	BOOLEAN ScenarioRequstedCabUpload,
	UINT8 OverrideQuerySetting
	);

EscalationWorkItem_NoCabUpload_InvalidReportingOption(
	GUID ScenarioId,
	BOOLEAN ScenarioRequstedCabUpload,
	UINT8 OverrideQuerySetting,
	UINT8 EscalationReportingOption,
	UINT64 TotalGeneratedDiskBytes
	);

WorkItem_MarkComplete(
	GUID ScenarioId
	);

EscalationWorkItem_EscalationCompleted(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT32 HRESULT,
	BOOLEAN FailedDuringPreEscalationChecks,
	UNICODESTRING FailedActionName,
	BOOLEAN IsAgentEscalation
	);

IActionDef_CreateAgentAction(
	ANSISTRING Type
	);

ActionFactory_CreateEscalationAction(
	COUNTEDSTRING Type
	);

Transition_UnmatchedTriggerSource(
	UNICODESTRING TransitionName,
	UINT8 TransitionTriggerSource,
	BOOLEAN TriggerIsAgentEvent
	);

TimeTriggerScheduler_AddingTriggerToBuffer(
	UNICODESTRING TriggerToString
	);

TimeTriggerScheduler_FailedToAddTrigger_BufferFull(
	VOID
	);

TimeTriggerScheduler_SchedulingWakeup(
	UINT32 earliestUsefulWakeTimeMillis,
	UINT32 NextWakeupWindow,
	UINT64 WakeUpTimeRelative,
	FILETIME WakeupTimeAbsolute
	);

TimeTriggerScheduler_ProcessingTriggersOnWake(
	VOID
	);

TimeTriggerScheduler_ImmediateWakeup(
	VOID
	);

TimeTriggerScheduler_NoWakeUpNeeded(
	VOID
	);

TimeTriggerScheduler_Schedule(
	UNICODESTRING TriggerToString
	);

TimeTriggerScheduler_Unschedule(
	UNICODESTRING TriggerToString
	);

ScenarioDef_FailedToCreateEscalationConfig(
	VOID
	);

ScenarioDef_FailedToCreateFilter(
	VOID
	);

ScenarioDef_FailedToCreateTelemetryEvent(
	UNICODESTRING InvalidTelemetryEvent
	);

ScenarioDef_FailedToCreateEscalationAction(
	VOID
	);

ScenarioDef_FailedToCreateTrigger(
	VOID
	);

ScenarioDependencyResolver_DependencyNotSatisfiable(
	GUID ScenarioId,
	GUID DependencyScenarioId
	);

ScenarioDependencyResolver_DependencyNotYetSatisfied(
	GUID ScenarioId,
	GUID DependencyScenarioId
	);

ScenarioDependencyResolver_FinishedResolvingDependenciesForScenario(
	GUID ScenarioId
	);

ScenarioDependencyResolver_AddingNewEntryToIsland(
	GUID ScenarioId
	);

ScenarioDependencyResolver_ResolvingDependency(
	GUID ScenarioId,
	GUID DependencyScenarioId
	);

ScenarioDependencyResolver_DependencyAlreadySatisfied_InIsland(
	GUID ScenarioId,
	GUID DependencyScenarioId
	);

ScenarioDependencyResolver_DependencyAlreadySatisfied_NoDependency(
	GUID ScenarioId,
	GUID DependencyScenarioId
	);

ScenarioDependencyResolver_AddingEdge(
	GUID ScenarioId,
	GUID CurrentDependency
	);

ScenarioDependencyResolver_FinishAddingDependentWaitingScenario(
	VOID
	);

ScenarioDependencyResolver_StartingNewIsland(
	GUID ScenarioId
	);

ScenarioDependencyResolver_AddingAcceptedScenario(
	GUID ScenarioId
	);

ScenarioDependencyResolver_StartAddingDependentWaitingScenario(
	GUID ScenarioId
	);

ConfigurationFactory_CreateConfiguration_Name(
	COUNTEDSTRING ConfigurationName
	);

ConfigurationFactory_CreateConfiguration_Type(
	UINT8 ConfigurationType
	);

ScenarioManager_MismatchedScenarioSchemaVersion(
	GUID ScenarioId
	);

ScenarioStorage_ParsingScenario(
	UNICODESTRING ScenarioId,
	UNICODESTRING StableId
	);

ScenarioStorage_KnownScenario_SkippingParse(
	UNICODESTRING ScenarioId,
	UNICODESTRING StableId
	);

ScenarioManager_LoadingScenarioFileStart(
	COUNTEDSTRING FileName
	);

FilterFactory_CreateFilter(
	COUNTEDSTRING Type
	);

TelemetryEventFactory_CreateTelemetryEvent_Type(
	UINT8 TelemetryEventType
	);

DerivedTelemetryEvent_SystemMetadata_MetadataEngineNotReady(
	UNICODESTRING EventName
	);

DerivedTelemetryEvent_Log(
	UNICODESTRING EventName,
	UNICODESTRING MeasureValueToken,
	UINT32 MeasureValueTokenType,
	BOOLEAN IsCoreData,
	UINT64 PrivacyDataType,
	BOOLEAN ShouldAddSystemMetadata,
	BOOLEAN ScenarioPathTuple,
	UINT8 SourceState,
	UINT8 TargetState,
	UNICODESTRING TransitionName,
	BOOLEAN ExpandedAttributes,
	UNICODESTRING Name,
	UNICODESTRING StrValue,
	INT32 DataType
	);

DerivedTelemetryEvent_UpdateEventName(
	COUNTEDSTRING FullyQualifiedName,
	COUNTEDSTRING ProviderName
	);

DerivedTelemetryEvent_UnableToRetrieveMeasureVersionGuid_SkipEvent(
	COUNTEDSTRING EventName
	);

Filter_FilterEvaulated(
	COUNTEDSTRING FilterName,
	UINT32 IsSatisfied,
	UINT32 HRESULT,
	UINT32 FromCache,
	UNICODESTRING FilterRepresentation,
	UNICODESTRING LeftProperty,
	UNICODESTRING RightProperty
	);

Filter_FilterEvaulated(
	COUNTEDSTRING FilterName,
	UINT32 IsSatisfied,
	UINT32 HRESULT,
	UINT32 FromCache,
	UNICODESTRING FilterRepresentation,
	UNICODESTRING LeftProperty
	);

Filter_FilterEvaulated(
	COUNTEDSTRING FilterName,
	UINT32 IsSatisfied,
	UINT32 HRESULT,
	UINT32 FromCache,
	UNICODESTRING FilterRepresentation
	);

TraceManager_UnthrottleTimerPeriodMillis_TestHook(
	UINT32 UnthrottleTimerPeriodMillis
	);

TraceManager_ExcessiveEventCheckTimerPeriodMillis_TestHook(
	UINT32 ExcessiveEventCheckTimerPeriodMillis
	);

TraceManager_SettingsChangeMessageReceived(
	VOID
	);

TraceManager_StopAgentTraceMessageReceived(
	ANSISTRING TraceSlot,
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT64 ProfileHash
	);

TraceManager_StopInactiveMessageReceived(
	ANSISTRING TraceSlot,
	GUID ScenarioId,
	UINT64 ProfileHash
	);

TraceManager_StoppingInactiveAgentTrace(
	COUNTEDSTRING AgentId,
	ANSISTRING TraceSlot,
	GUID ScenarioId,
	UINT64 ProfileHash
	);

TraceManager_SnapAgentTraceSlotDetails(
	ANSISTRING TraceSlot,
	GUID ScenarioId
	);

TraceManager_SnapAgentTraceMessageReceived(
	VOID
	);

TraceManager_StartAgentSlotTraceMessageReceived(
	ANSISTRING TraceSlot,
	GUID ScenarioId,
	ANSISTRING ObjectType,
	UINT64 ObjectHash
	);

TraceManager_StartAgentTraceMessageReceived(
	VOID
	);

DiagTrack_Rundown_TraceManager(
	VOID
	);

DiagTrack_Rundown_TraceManager(
	VOID
	);

DiagTrack_Rundown_TraceManager_BudgetInfo(
	UINT64 TraceBufferBudgetCapBytes
	);

DiagTrack_Rundown_TraceManager_UsedBudget(
	UINT32 SlotType,
	UINT64 TraceBufferBudgetBytesForSlot
	);

TraceManager_ThrottleDownToNewCap_Throttle(
	UINT32 NextThrottle
	);

TraceManager_UnthrottleHighestPriorityTraces(
	UINT32 NextUnthrottle,
	UINT32 RequiredBudget,
	UINT64 AvailableBudget
	);

TraceManager_CancelAllTraces(
	VOID
	);

TraceManager_ThrottleForExclusiveTrace(
	UINT8 RequestSlot
	);

TraceManager_ThrottleForExclusiveTrace_HigherPriorityTraceCannotBeThrottled(
	UINT8 RequestSlot,
	UINT32 RunningSlot
	);

TraceManager_ThrottleForExclusiveTrace_Throttle(
	UINT8 RequestSlot,
	UINT32 RunningSlot
	);

TraceManager_ThrottleDownToNewCap(
	VOID
	);

TraceManager_ThrottleLowestPriorityTraces_Throttle(
	UINT8 RequestSlot,
	UINT32 RunningSlot
	);

TraceManager_ThrottleLowestPriorityTraces_WillThrottle(
	UINT8 RequestSlot,
	UINT8 WillThrottle,
	UINT64 BudgetInUseByWillThrottle,
	UINT64 BudgetPostThrottling
	);

TraceManager_ThrottleLowestPriorityTraces(
	UINT8 RequestSlot,
	UINT32 BufferSizeInBytes
	);

TraceManager_ThrottleLowerPriorityExclusives_Throttle(
	UINT8 RequestSlot,
	UINT32 RunningSlot
	);

Tracer_GetTraceBufferBudget_FailedQueryState(
	VOID
	);

TraceManager_EnforceBudgetCap(
	UINT64 InUseBufferBudgetBytes,
	UINT64 NewBufferBudgetBytes
	);

TraceManager_EnforceBudgetCap(
	VOID
	);

Tracer_GetTraceBufferBudget_QueryingState(
	UINT64 PhysicalMemoryBytes,
	UINT32 TracerBufferPermilOverride,
	UINT32 TraceBufferMaxMBOverride,
	UINT64 ResultPhysicalMemoryPercentBytes,
	UINT64 ResultBufferMaxBytes,
	UINT64 ResultBudgetBytes
	);

TraceManager_ConfiguringExpirationTimer(
	UINT32 MinimumTimeToTraceExpirationMillis
	);

TraceManager_OnBeforeTraceStarted_InsufficientTotalBufferBudget(
	UINT8 SlotType,
	UINT64 TotalBudgetBytes,
	UINT64 AvailableBudgetBytes,
	UINT32 RequiredBudgetBytes
	);

TraceManager_OnBeforeTraceStarted_UnableToReserveBufferBudget(
	UINT8 SlotType,
	UINT64 TotalBudgetBytes,
	UINT64 AvailableBudgetBytes,
	UINT32 RequiredBudgetBytes
	);

TraceManager_OnAfterTraceStarted_CommittedBufferBudget(
	UINT8 SlotType,
	UINT64 AvailableBudgetBytesAfterCommit,
	UINT32 RequiredBudgetBytes
	);

TraceManager_OnBeforeTraceStarted_Start(
	UINT8 SlotType,
	UINT64 TotalBudgetBytes,
	UINT64 AvailableBudgetBytes,
	UINT32 RequiredBudgetBytes,
	BOOLEAN IsExclusive,
	BOOLEAN SkipBufferBudgetChecking
	);

TraceManager_SkipSlotOnTraceExpiry(
	UINT8 SlotType
	);

DiagTrack_Rundown_TraceSlot_CacheTraceInfo(
	COUNTEDSTRING SlotName,
	GUID ScenarioId,
	UINT64 ProfileHash,
	BOOLEAN IsExclusive,
	BOOLEAN IsAutoLogger,
	UINT64 MaxTraceDurationFiletime,
	UINT8 Priority,
	COUNTEDANSISTRING TraceProfile,
	UINT32 WprCalculatedBufferSizeBytes,
	INT32 WprCalculateBufferSizeResult
	);

DiagTrack_Rundown_TraceSlot(
	VOID
	);

DiagTrack_Rundown_TraceSlot(
	VOID
	);

DiagTrack_Rundown_TraceSlot_CurrentTraceInfo(
	COUNTEDSTRING SlotName,
	GUID ScenarioId,
	UINT64 ProfileHash,
	UINT64 UtcStartTimeFiletime,
	UINT64 SessionStartTimeFiletime,
	UINT64 StopTimeFiletime,
	UINT32 RequiredBufferSpace,
	BOOLEAN HasStopTime,
	BOOLEAN IsThrottled
	);

TraceSlot_StartTracingFailedDueToWprError(
	INT32 HRESULT,
	GUID ScenarioId,
	UINT64 TraceProfileHash
	);

TraceManager_StartingTrace(
	GUID ScenarioId,
	UINT64 TraceProfileHash,
	UINT8 TracePriority,
	INT32 TraceEndTime,
	UINT32 HRESULT
	);

TraceSlot_HandlingWprErrorWithScroch(
	INT32 HRESULT
	);

TraceManager_StoppingTrace(
	BOOLEAN WasPreempted,
	UINT64 TraceProfileHash
	);

TraceManager_UnThrottleSlotStillThrottled(
	UINT32 ThrottleState
	);

TraceSlot_AlwaysExcessiveEvent(
	COUNTEDSTRING SlotName
	);

TraceSlot_ShouldThrottleBasedOnTraceSessionUsage(
	UINT64 EventsLogged,
	UINT32 TimeIntervalInMs
	);

TraceSlot_Event_OnUpdateTraceState(
	COUNTEDSTRING SlotName
	);

TraceSlot_Event_OnServiceShutdown(
	COUNTEDSTRING SlotName
	);

TraceSlot_Event_OnServiceShutdown_CancelRunningTrace(
	COUNTEDSTRING SlotName,
	BOOLEAN IsAutoLogger,
	BOOLEAN IsSlotThrottled
	);

TraceSlot_Event_OnServiceStartup_TraceExpiredDuringOfflinePeriod(
	COUNTEDSTRING SlotName
	);

TraceSlot_Event_OnServiceStartup_RestartedSavedTrace(
	COUNTEDSTRING SlotName
	);

TraceSlot_Event_OnServiceStartup_RegistryTraceNotValid(
	COUNTEDSTRING SlotName
	);

TraceSlot_Event_OnBeginScenarioParsing(
	VOID
	);

TraceSlot_Event_OnServiceStartup(
	COUNTEDSTRING SlotName
	);

DiagTrack_IsRunningTraceProfileMinTraceDurationMet_Calculation(
	UINT64 MVTDFiletime,
	UINT64 RuntimeFiletime
	);

TraceSlot_FailedToSetTemporaryFilePath(
	COUNTEDSTRING SlotName,
	UINT32 ErrorCode
	);

TraceSlot_SetTemporaryFilePath(
	COUNTEDSTRING SlotName,
	UNICODESTRING TempPath
	);

MoveAllFilesWithPattern_MoveFailed(
	UNICODESTRING SourcePath,
	UNICODESTRING DestinationPath,
	COUNTEDSTRING Pattern,
	UNICODESTRING FailingSourcePath,
	UNICODESTRING FailingDestinationPath,
	INT32 ErrorCode
	);

SnapshotManager_SnapHeapSnapshotOnDemand(
	UINT32 ProcessId
	);

SnapshotManager_StartHeapSnapshotByProcessName(
	UNICODESTRING ProcessName,
	BOOLEAN IncludeRunningProcesses,
	BOOLEAN IncludeFutureProcesses
	);

Tracer_StoppedTraceSession(
	UNICODESTRING InstanceName,
	UNICODESTRING LoggerName,
	INT32 HRESULT
	);

Tracer_CancelInProgressSave(
	VOID
	);

Tracer_PerformingScorch(
	UNICODESTRING InstanceName
	);

Tracer_MovePreMergedTraces(
	UNICODESTRING TempTraceDirectory,
	COUNTEDSTRING DestDir
	);

Tracer_UpdateTraceState(
	UNICODESTRING InstanceName
	);

Tracer_CleanupFile(
	UNICODESTRING TraceFile
	);

Tracer_FailedToCleanupFile(
	UNICODESTRING TraceFile,
	UINT32 ErrorCode
	);

Tracer_DuplicateWprInstance_RetryPath(
	VOID
	);

Tracer_DuplicateWprInstance_EventDoesntAlreadyExist(
	VOID
	);

AlternativeSlot_MergeShutdownTraceSuceeded(
	UINT64 TraceProfileHash,
	UINT64 BootId
	);

AlternativeSlot_MergeShutdownTraceFailed(
	INT32 ReturnCode
	);

DiagTrack_Rundown_AlternativeSlot(
	VOID
	);

DiagTrack_Rundown_AlternativeSlot(
	VOID
	);

AotSlot_PickedRandomShutdownTrace(
	GUID ScenarioId,
	UINT64 ProfileHash
	);

AlternativeSlot_Event_OnNoRemainingEscalations(
	GUID ScenarioId,
	UINT64 Hash
	);

AlternativeSlot_Event_OnEndScenarioParsing(
	BOOLEAN InitialParse
	);

AlternativeSlot_Event_OnTraceExpiry(
	VOID
	);

AlternativeSlot_Event_OnTraceExpiry(
	BOOLEAN IsOwnerValid,
	BOOLEAN IsExpired
	);

TraceManager_SnappingTrace(
	UINT64 TraceProfileHash,
	UINT32 HRESULT
	);

AlternativeSlot_GetTimeToExpirationFiletime(
	UINT64 RemainingRuntime
	);

AlternativeSlot_Event_OnTraceRemoval_ParsingActive(
	GUID ScenarioId,
	UINT64 Hash
	);

AlternativeSlot_Event_OnTraceRemoval(
	GUID ScenarioId,
	UINT64 Hash
	);

AlternativeSlot_SnapSlotTrace(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT64 Hash,
	COUNTEDSTRING OutputDirPath,
	BOOLEAN IsAutoLogger,
	BOOLEAN RequireExclusive,
	BOOLEAN RequireNGENPdbs,
	BOOLEAN IsFileBacked,
	UINT64 MinimumViableTraceDurationFiletime
	);

AlternativeSlot_StartShutdownTraceFailed(
	INT32 ReturnCode
	);

DiagTrack_Rundown_AotSlot(
	VOID
	);

AotSlot_PickedRandomAot(
	GUID ScenarioId,
	UINT64 ProfileHash,
	UINT32 TraceProbabiltyRange,
	UINT32 TraceProbabiltyRangeSelection,
	UINT32 HighRange,
	UINT32 MediumRange,
	UINT32 LowRange,
	UINT16 TraceProbabilityLevel
	);

AotSlot_StartAnyAot_AttemptToTrace(
	GUID ScenarioId,
	UINT64 ProfileHash
	);

DiagTrack_Rundown_AotSlot(
	VOID
	);

DiagTrack_Rundown_AotSlot_Info(
	UINT32 MaxRuntimeSec,
	BOOLEAN IsForcePick
	);

AotSlot_NoStartableTraces(
	VOID
	);

AotSlot_PickedRandomMandatoryAot(
	GUID ScenarioId,
	UINT64 ProfileHash,
	UINT16 TraceProbabilityLevel
	);

AotSlot_GetRandomAoT_SkippingUnstartableTrace(
	UINT64 TraceHash
	);

AotSlot_ModeSwitchAttempt(
	UINT16 OldMode,
	UINT16 NewMode
	);

AotSlot_GetForcePickAotTraceSet(
	GUID ForcePickAot
	);

AotSlot_IsAotPermitted(
	BOOLEAN IsAotPermitted
	);

AotSlot_Event_OnTraceExpiry(
	BOOLEAN IsForcePick,
	BOOLEAN IsExpired
	);

AotSlot_Event_OnEndScenarioParsing(
	BOOLEAN InitialParse
	);

AotSlot_Event_OnTraceExpiry(
	VOID
	);

AotSlot_GetTimeToExpirationFiletime(
	UINT64 RemainingRuntime
	);

AotSlot_Event_OnTraceRemoval_ParsingActive(
	GUID ScenarioId,
	UINT64 Hash
	);

AotSlot_Event_OnTraceRemoval(
	GUID ScenarioId,
	UINT64 Hash
	);

AotSlot_Event_OnNoRemainingEscalations(
	GUID ScenarioId,
	UINT64 Hash
	);

AotSlot_SnapSlotTrace(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT64 Hash,
	COUNTEDSTRING OutputDirPath,
	BOOLEAN IsAutoLogger,
	BOOLEAN RequireExclusive,
	BOOLEAN RequireNGENPdbs,
	UINT64 MinimumViableTraceDurationFiletime
	);

DiagTrack_Rundown_MiniSlot_Info(
	BOOLEAN IsEnabled,
	BOOLEAN IsContentEnabled,
	UINT32 TotalClusterPriority,
	UINT64 NumClusters
	);

DiagTrack_Rundown_MiniSlot_ClusterInfo(
	UNICODESTRING Name,
	GUID Id,
	UINT32 Priority,
	UINT64 NumTraces,
	UNICODESTRING TraceHashes
	);

DiagTrack_Rundown_MiniSlot(
	VOID
	);

DiagTrack_Rundown_MiniSlot(
	VOID
	);

MiniSlot_Event_OnTraceExpiry(
	VOID
	);

MiniSlot_Event_OnTraceExpiry(
	BOOLEAN IsExpired
	);

MiniSlot_Event_OnEndScenarioParsing_UnknownClusterSetting(
	UNICODESTRING SettingName,
	UNICODESTRING SettingValue
	);

MiniSlot_Event_OnEndScenarioParsing_UnknownTraceSetting(
	UNICODESTRING SettingName,
	UNICODESTRING SettingValue
	);

MiniSlot_Event_OnEndScenarioParsing_InvalidSetting(
	UNICODESTRING SettingName,
	UNICODESTRING SettingValue
	);

MiniSlot_Event_OnFinalizeScenarioParsing(
	BOOLEAN IsSlotEnabled,
	BOOLEAN LastMiniSlotEnabledState,
	BOOLEAN IsContentPermitted,
	BOOLEAN LastMiniSlotContentPermittedState
	);

MiniSlot_Event_OnEndScenarioParsing(
	BOOLEAN InitialParse
	);

MiniSlot_SnappingTrace(
	UINT64 TraceProfileHash,
	UINT32 HRESULT
	);

MiniSlot_GetTimeToExpirationFiletime(
	UINT64 RemainingRuntime
	);

MiniSlot_SnapSlotTrace(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	UINT64 Hash,
	COUNTEDSTRING OutputDirPath,
	BOOLEAN IsAutoLogger,
	BOOLEAN RequireExclusive,
	BOOLEAN RequireNGENPdbs,
	UINT64 MinimumViableTraceDurationFiletime
	);

SelfDiagSlot_Event_OnTraceExpiry(
	VOID
	);

DiagTrack_Rundown_SelfDiagSlot(
	VOID
	);

DiagTrack_Rundown_SelfDiagSlot(
	VOID
	);

SelfDiagSlot_Event_OnTraceRemoval_ParsingActive(
	GUID ScenarioId,
	UINT64 Hash
	);

SelfDiagSlot_Event_OnNoRemainingEscalations(
	GUID ScenarioId,
	UINT64 Hash,
	BOOLEAN IsScenarioParsingActive
	);

SelfDiagSlot_Event_OnEndScenarioParsing(
	BOOLEAN InitialParse
	);

SelfDiagSlot_SnapSlotTrace(
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	COUNTEDSTRING OutputDirPath
	);

RunningTraceInfo_OnServiceStartup(
	COUNTEDSTRING SlotName,
	GUID ScenarioId,
	UINT64 ProfileHash,
	UINT64 UtcStartTimeFiletime,
	UINT64 SessionStartTimeFiletime,
	UINT64 StopTimeFiletime,
	UINT32 RequiredBufferSpace,
	BOOLEAN HasStopTime,
	BOOLEAN IsThrottled,
	UINT32 ThrottleState,
	UINT32 Priority,
	BOOLEAN IsExclusive,
	BOOLEAN IsAutoLogger
	);

RunningTraceInfo_RemoveFromRegistry(
	VOID
	);

RunningTraceInfo_SaveToRegistry(
	COUNTEDSTRING SlotName,
	GUID ScenarioId,
	UINT64 ProfileHash,
	UINT64 UtcStartTimeFiletime,
	UINT64 SessionStartTimeFiletime,
	UINT64 StopTimeFiletime,
	UINT32 RequiredBufferSpace,
	BOOLEAN HasStopTime,
	BOOLEAN IsThrottled,
	UINT32 ThrottleState,
	UINT8 Priority,
	UINT32 IsExclusive,
	BOOLEAN IsAutoLogger
	);

RunningTraceInfo_ExtendExpiration(
	UINT64 UpdatedUtcStartTime,
	UINT64 NewExpirationTime,
	UINT64 OldExpirationTime,
	GUID ScenarioId,
	UINT64 ProfileHash
	);

AsimovUploader_TelClientSyntheticSampledOut(
	COUNTEDSTRING Name
	);

TriggerFactory_CreateTrigger(
	COUNTEDSTRING Type
	);

ITriggerInst_FailedToAddPrivTagsToJson(
	COUNTEDSTRING FullEventName,
	UINT64 PrivTagsToAdd
	);

ITriggerInst_CreateTriggerInst(
	UINT8 Type
	);

ITriggerInst_SetAggregatedEventMetadata_InvalidPartADimensionSetting(
	COUNTEDSTRING AggregationKey,
	COUNTEDSTRING TriggerName
	);

ITriggerInst_AggregationKeyFieldInfo_Explicit(
	COUNTEDSTRING TriggerName,
	UNICODESTRING FieldName,
	UINT32 DataType,
	UINT32 DataSize
	);

ITriggerInst_AggregationKeyFieldInfo(
	COUNTEDSTRING TriggerName,
	COUNTEDSTRING FieldName,
	UINT32 DataType,
	UINT32 DataSize
	);

ITriggerInst_NoAggregationKeyFields_MissingPartA(
	COUNTEDSTRING TriggerName
	);

ITriggerInst_AggregationKeyFormulaFailure(
	COUNTEDSTRING TriggerName,
	INT32 ErrorCode
	);

ITriggerInst_SetAggregatedEventMetadata_InvalidDimension(
	COUNTEDSTRING AggregationKey,
	COUNTEDSTRING TriggerName
	);

ITriggerInst_SetAggregateEventId(
	COUNTEDSTRING TriggerName,
	UINT64 NumAggKeyFields,
	UINT64 AggregateEventId
	);

ITriggerInst_NodimensionData_MissingPartC(
	COUNTEDSTRING TriggerName
	);

ITriggerInst_SetAggregatedEventMetadata_SkipInvalidAggregationField(
	COUNTEDSTRING AggregationField,
	COUNTEDSTRING TriggerName
	);

ITriggerInst_AggregateFieldFormulaFailure(
	COUNTEDSTRING TriggerName,
	INT32 ErrorCode
	);

Trigger_UsingAlternativeSID(
	UINT32 SessionId,
	UNICODESTRING EventSID,
	UNICODESTRING AlternativeSID
	);

Trigger_UsingOverrideSid_PartCOverride(
	UNICODESTRING OldSID,
	UNICODESTRING NewSID,
	INT32 ValidSid,
	BOOLEAN LoggedInUser
	);

Trigger_UsingEventSID_BecauseItIsALoggedInUser(
	UNICODESTRING SID
	);

Trigger_UsingEventSID_BecauseNoAssociatedLoggedInUserFound(
	UINT32 SessionId,
	UNICODESTRING SID
	);

ExporterManager_UnloadingExporters(
	VOID
	);

ExporterManager_UnloadingExporter(
	COUNTEDSTRING ExporterName
	);

ExporterManager_UnloadedExporter(
	COUNTEDSTRING ExporterName
	);

ExporterManager_CompleteExportersChange(
	VOID
	);

ExporterManager_LoadingExporter(
	COUNTEDSTRING ExporterName
	);

ExporterManager_LoadedExporter(
	COUNTEDSTRING ExporterName
	);

ExporterManager_ExporterQueueWillStop(
	UINT32 WaitResult
	);

ExporterManager_ExporterQueue_NoTriggerListener(
	VOID
	);

ExporterManager_LoadingExporters(
	VOID
	);

ExporterManager_ProcessEvent(
	COUNTEDSTRING EventName
	);

ExporterManager_StopExporterQueue(
	VOID
	);

ExporterManager_SkippingExporterQueueWork_Stopping(
	VOID
	);

ExporterManager_ExporterQueueCallback(
	VOID
	);

ExporterManager_StartExporterQueue(
	VOID
	);

DiagTrack_Rundown_AggregatedEventManager(
	VOID
	);

AggregatedEventManager_EventSetting(
	UNICODESTRING EventName,
	BOOL32 UploadSourceEvents,
	COUNTEDSTRING MetricEventName,
	UINT32 PeriodMillis,
	UINT32 MaxEvents,
	UINT8 EventAggregationMode,
	UINT32 MaxDimensionSetsPerEvent,
	GUID SourceEventProviderGuid,
	UINT64 SourceEventKeywords,
	UINT64 SamplingCategory,
	UINT64 PrivacyDataTags,
	GUID ProviderGroupGuid,
	HEX AggregateFields,
	UNICODESTRING SourceFieldName,
	UNICODESTRING MetricFieldName,
	UINT64 AggregationMode,
	NOPRINT Ranges,
	ANSISTRING Bound,
	STRING Dimensions,
	UNICODESTRING SourceFieldName,
	UNICODESTRING MetricFieldName
	);

AggregatedEventManager_InvalidSetting_MissingSourceOrMetricEventName(
	UNICODESTRING SourceEventName,
	COUNTEDSTRING MetricEventName
	);

AggregatedEventManager_MissingAggregatedEventSettings(
	COUNTEDSTRING EventName
	);

DiagTrack_Rundown_AggregatedEventManager(
	VOID
	);

AggregatedEventManager_InvalidAggMode_SourceEventCountMustBeExclusive(
	COUNTEDSTRING SettingName
	);

AggregatedEventManager_InvalidSetting_MissingPrivacyDataTag(
	UNICODESTRING SourceEventName,
	COUNTEDSTRING MetricEventName
	);

AggregatedEventManager_InvalidSetting_FormulaMustBeArray(
	COUNTEDSTRING SettingName
	);

AggregatedEventManager_InvalidSetting_FormulaNodeMustBeObject(
	COUNTEDSTRING SettingName
	);

AggregatedEventManager_InvalidSetting_FormulaParseFailure(
	COUNTEDSTRING SettingName,
	INT32 ParseResult
	);

AggregatedEventManager_UnknownAggregationField(
	COUNTEDSTRING SettingName,
	COUNTEDANSISTRING InvalidAggregationField
	);

AggregatedEventManager_InvalidSetting_KeepAndStatisticsModeCombined(
	COUNTEDSTRING SettingName,
	UNICODESTRING FieldAggregationMode
	);

AggregatedEventManager_InvalidSetting_MoreThanOneKeepModeCombined(
	COUNTEDSTRING SettingName,
	UNICODESTRING FieldAggregationMode
	);

AggregatedEventManager_InvalidSetting_AggregationModeUnspecifiedForNonDimensionField(
	COUNTEDSTRING SettingName
	);

AggregatedEventManager_InvalidSetting_FieldIsDimensionAndAggregate(
	COUNTEDSTRING SettingName,
	UNICODESTRING FieldAggregationMode
	);

AggregatedEventManager_InvalidSettingType_RangeBounds(
	COUNTEDANSISTRING SettingName,
	ANSISTRING ProvidedType
	);

AggregatedEventManager_InvalidSettingType_RangeBoundValue(
	COUNTEDANSISTRING SettingName,
	ANSISTRING ProvidedType
	);

AggregatedEventManager_UnknownField_AggregationModeSetting(
	COUNTEDSTRING SettingName,
	UNICODESTRING FieldAggregationMode
	);

AggregatedEventManager_InvalidSetting_SourceEventExcludeFormulaParseFailure(
	COUNTEDSTRING SettingName,
	INT32 ParseResult
	);

AggregatedEventManager_SourceEventInfo_UnknownField(
	COUNTEDSTRING SettingName,
	COUNTEDANSISTRING SourceEventInfoValue
	);

AggregatedEventManager_InvalidSetting_SourceEventExcludeFormulaMustBeArray(
	COUNTEDSTRING SettingName
	);

AggregatedEventManager_InvalidSetting_SourceEventExcludeFormulaNodeMustBeObject(
	COUNTEDSTRING SettingName
	);

AggregatedEventManager_InvalidSetting_UnknownPrivacyDataTag(
	UNICODESTRING PrivacyDataTags
	);

AggregatedEventManager_InvalidSetting_MaxDimensionSetsPerEvent(
	COUNTEDSTRING SettingName,
	COUNTEDANSISTRING MaxDimensionSetsPerEventValue
	);

AggregatedEventManager_InvalidSetting_UnknownSamplingCategory(
	UNICODESTRING SamplingCategory
	);

AggregatedEventManager_InvalidSetting_UnknownProviderGroup(
	UNICODESTRING ProviderGroup
	);

AggregatedEventManager_InvalidSettingType(
	COUNTEDANSISTRING SettingName,
	ANSISTRING ProvidedType
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	DOUBLE Value,
	DOUBLE LowerBound,
	DOUBLE UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	FLOAT Value,
	FLOAT LowerBound,
	FLOAT UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	FLOAT Value,
	FLOAT LowerBound,
	FLOAT UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	FLOAT Value,
	FLOAT LowerBound,
	FLOAT UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	UINT8 Value,
	UINT8 LowerBound,
	UINT8 UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	UINT8 Value,
	UINT8 LowerBound,
	UINT8 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	DOUBLE Value,
	DOUBLE LowerBound,
	DOUBLE UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	DOUBLE Value,
	DOUBLE LowerBound,
	DOUBLE UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	UINT16 Value,
	UINT16 LowerBound,
	UINT16 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	UINT16 Value,
	UINT16 LowerBound,
	UINT16 UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	UINT16 Value,
	UINT16 LowerBound,
	UINT16 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	UINT8 Value,
	UINT8 LowerBound,
	UINT8 UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	UINT64 Value,
	UINT64 LowerBound,
	UINT64 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	UINT32 Value,
	UINT32 LowerBound,
	UINT32 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	UINT32 Value,
	UINT32 LowerBound,
	UINT32 UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	UINT32 Value,
	UINT32 LowerBound,
	UINT32 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	STRING Value,
	STRING LowerBound,
	STRING UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	STRING Value,
	STRING LowerBound,
	STRING UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	UINT64 Value,
	UINT64 LowerBound,
	UINT64 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	UINT64 Value,
	UINT64 LowerBound,
	UINT64 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	INT16 Value,
	INT16 LowerBound,
	INT16 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	INT16 Value,
	INT16 LowerBound,
	INT16 UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	INT16 Value,
	INT16 LowerBound,
	INT16 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	STRING Value,
	STRING LowerBound,
	STRING UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	INT64 Value,
	INT64 LowerBound,
	INT64 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	INT32 Value,
	INT32 LowerBound,
	INT32 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	INT32 Value,
	INT32 LowerBound,
	INT32 UpperBound
	);

TriggerAggregator_InvalidBucket(
	UNICODESTRING FieldName,
	INT32 Value,
	INT32 LowerBound,
	INT32 UpperBound
	);

TriggerAggregator_ValueBelowRangeBounds(
	UNICODESTRING FieldName,
	INT64 Value,
	INT64 LowerBound,
	INT64 UpperBound
	);

TriggerAggregator_ValueAboveRangeBounds(
	UNICODESTRING FieldName,
	INT64 Value,
	INT64 LowerBound,
	INT64 UpperBound
	);

TriggerAggregator_FailedToLoadAggregateTrigger(
	UINT64 AggregateEventId
	);

TriggerAggregator_RemoveAggregateDataFromCache(
	UINT64 AggregateEventId
	);

TriggerAggregator_MetricsEventSettingsInfo(
	COUNTEDSTRING EventName,
	UINT64 AggregateEventId,
	UINT64 EventCategory,
	GUID GroupId,
	DOUBLE UploadSampleRate
	);

TriggerAggregator_AddTriggerDataToCacheStorage(
	UINT64 AggregateEventId,
	UINT32 InitialTriggerDataStorageSize,
	UINT64 FinalTriggerDataStorageSize
	);

TriggerAggregator_AggregateTriggerCacheMiss(
	UINT64 AggregateEventId
	);

TriggerAggregator_DeleteAggregateFileFromDisk(
	COUNTEDSTRING AggregateDataFilePath,
	UINT64 AggregateEventId
	);

TriggerAggregator_ReadTriggerFromDisk(
	UINT64 AggregateEventId
	);

TriggerAggregator_ReadAggregateDataFromDisk(
	UINT64 AggregateEventId
	);

TriggerAggregator_WriteTriggerToDisk(
	COUNTEDSTRING EventName,
	UINT64 AggregateEventId
	);

DiagTrack_Rundown_TriggerAggregator(
	VOID
	);

TriggerAggregator_WriteAggregateDataToDisk(
	UINT64 AggregateEventId
	);

TriggerAggregator_LogAggregationTable_AggregateEventIdNotFound(
	UINT64 AggregateEventId
	);

DiagTrack_Rundown_TriggerAggregator(
	VOID
	);

TriggerAggregator_InFlightAggregationTableEntry(
	UINT64 EventNameHash,
	UINT64 AggregationStartTime,
	UINT32 AggregationPeriodMillis,
	UINT64 AggregateEventCount
	);

TriggerAggregator_LogInFlightAggregateEventData_Verbose(
	COUNTEDSTRING EventName,
	ANSISTRING PartCJson
	);

TriggerAggregator_LogInFlightAggregateEventData_Info(
	COUNTEDSTRING EventName,
	ANSISTRING PartCJson
	);

TriggerAggregator_LogInFlightAggregateEventData(
	ANSISTRING AggregateDataJson
	);

TriggerAggregator_AggregateEventOfUnknownType(
	COUNTEDSTRING Name,
	COUNTEDSTRING TriggerId
	);

TriggerAggregator_SetAggregationStatsTimer(
	VOID
	);

TriggerAggregator_RemovingAggregationTableEntry(
	UINT64 eventNameHash
	);

TriggerAggregator_FireAggregationStats(
	VOID
	);

TriggerAggregator_DownSampleMetricsEventBeforePersist(
	COUNTEDSTRING EventName,
	UINT64 AggregateEventId
	);

TriggerAggregator_FinalizeAggregateEvents(
	UINT64 LatestAggregationWindowStartTime,
	UINT64 CurrentAggregationWindowEndTime
	);

TriggerAggregator_ProcessAggregateEventEntry(
	UINT64 EventNameHash,
	UINT32 AggregationPeriodMillis,
	UINT64 AggregationStartTime,
	UINT64 EarliestAggregationEndTime,
	UINT64 AggregationWindowEndTime,
	BOOLEAN ReadyToFire,
	BOOLEAN FinalizeIncompleteAggregationWindows,
	UINT64 AggregateEventCount
	);

TriggerAggregator_AggregateEventIdNotFound(
	UINT64 AggregateEventId
	);

TriggerAggregator_DiscardExistingAggregatationFieldValue(
	VOID
	);

TriggerAggregator_SkippingAggregationTimerWorkWhenAggregationIsStopped(
	VOID
	);

TriggerAggregator_UpdateAggregateEventField(
	UNICODESTRING FieldName,
	UINT64 AggregationMode,
	UNICODESTRING NewValue
	);

TriggerAggregator_NewTriggerSourceFieldCacheMiss(
	UNICODESTRING FieldName
	);

TriggerAggregator_DiscardNewAggregatationFieldValue(
	VOID
	);

TriggerAggregator_MergeTriggerSourceFieldCacheMiss(
	UNICODESTRING FieldName
	);

TriggerAggregator_MergePreaggregatedMetricField(
	COUNTEDSTRING SourceFieldName,
	COUNTEDSTRING MetricFieldName
	);

TriggerAggregator_MergeExistingAggregateEvent(
	COUNTEDSTRING EventName,
	UINT64 AggregateEventId
	);

TriggerAggregator_AddNewAggregateEvent(
	COUNTEDSTRING EventName,
	UINT64 AggregationStartTime,
	UINT32 AggregationPeriodMillis,
	UINT64 AggregateEventId,
	UINT32 MaxEvents,
	ANSISTRING EventAggregationMode,
	UINT64 AggregateEventCount
	);

TriggerAggregator_ProcessNewAggregationKeyForTrigger(
	UINT64 AggregationStartTime,
	UINT64 EventTime,
	COUNTEDSTRING EventName,
	UINT64 AggregateEventId,
	UINT64 EventNameHash
	);

TriggerAggregator_RemoveAggregateEventId(
	ANSISTRING EventAggMode,
	UINT64 AggregateEventIdToRemove
	);

TriggerAggregator_AddTrigger(
	UINT64 AggregationStartTime,
	UINT64 EventTime,
	COUNTEDSTRING EventName,
	UINT64 AggregateEventId
	);

TriggerAggregator_RawEventExcluded(
	COUNTEDSTRING EventName
	);

TriggerAggregator_InvalidExcludeSourceScript(
	COUNTEDSTRING EventName,
	INT32 HRESULT
	);

Agent_AcceptingScenarioTrigger(
	GUID ProviderId,
	COUNTEDSTRING EventName,
	UINT32 EventId,
	UINT32 EventVersion,
	UINT64 EventKeywords,
	UINT8 EventLevel
	);

Agent_SkippingUnsupportedAgentTriggerType(
	UINT8 TriggerType
	);

Agent_EmptyScenarioTriggersSetReceived(
	VOID
	);

Agent_NoScenarioTriggersSetReceived(
	VOID
	);

AgentETWConsumer_StopConsumer_ListenerThreadExited(
	VOID
	);

Agent_ProcessTrace(
	INT32 ReturnCode
	);

AgentETWConsumer_StopConsumer(
	VOID
	);

AgentETWConsumer_StopConsumer_CloseTrace(
	VOID
	);

Agent_OpenRealTimeTrace(
	INT32 ReturnCode
	);

AgentETWConsumer_ListenerThreadExit(
	UINT32 ExitCode
	);

Agent_SetTraceStartedEventOnError(
	VOID
	);

Agent_FinishLoadSettingsFromHost(
	VOID
	);

AgentEtwConsumer_SkipUpdateEtwSession_ConsumerStopping(
	VOID
	);

Agent_TriggerSettingReceived(
	UNICODESTRING Namespace,
	UNICODESTRING Setting,
	DOUBLE SampleRate,
	INT8 Latency,
	INT8 Persistence,
	UINT64 CatName,
	BOOLEAN RemoveCoreDataAttribute
	);

Agent_MachineSampleNumberReceived(
	DOUBLE SampleNumber
	);

UtcJsonEtwReader_IsExpectedFieldType_SkipUnexpectedType(
	COUNTEDSTRING FieldName,
	UINT16 FieldType,
	UINT16 Flags
	);

UtcJsonEtwReader_AggregationParameters(
	UINT32 AggregationPeriodMillis,
	UINT32 MaxEventCount,
	ANSISTRING AggMode
	);

UtcJsonEtwReader_ParseDiffpStruct(
	UNICODESTRING FieldName,
	ANSISTRING DiffpAlgorithm,
	UINT8 AggMode,
	DOUBLE Epsilon,
	DOUBLE PerturbationProbability,
	ANSISTRING HistogramType,
	ANSISTRING Value,
	ANSISTRING MaxValue
	);

UtcJsonEtwReader_ReplaceAggregateValueStruct(
	UNICODESTRING FieldName,
	UINT8 AggMode,
	ANSISTRING Value
	);

PiiScrubberManager_RegisterPrivacyGuardPattern(
	COUNTEDSTRING PatternType
	);

PiiScrubberManager_DeletePrivacyGuardPattern(
	UNICODESTRING PatternType
	);

PiiScrubberManager_UpdatePrivacyGuardPattern(
	UNICODESTRING PatternType
	);

PiiScrubberManager_AddPrivacyGuardPattern(
	UNICODESTRING PatternType
	);

PiiScrubberManager_ClearAllPrivacyGuardPatterns(
	VOID
	);

Exporter_Loaded(
	UNICODESTRING ExporterName,
	UNICODESTRING ModulePath
	);

Exporter_VersionInfo(
	UINT32 ApiContractVersion,
	UINT32 MinimumSupportedVersion
	);

TriggerBuffer_ResizeDisabled(
	VOID
	);

TriggerBuffer_ResizeNotNeeded(
	VOID
	);

TriggerBuffer_TooFullToResize(
	UINT64 CurrentSize,
	UINT64 CurrentMaxSize,
	UINT64 NewMaxSize
	);

TriggerBuffer_Resize(
	UINT64 CurrentSize,
	UINT64 CurrentMaxSize,
	UINT64 NewMaxSize
	);

ETWConsumer_TryReloadSettings(
	VOID
	);

ETWConsumer_AgentEventNotApplicable(
	COUNTEDSTRING Event
	);

ETWConsumer_AgentEventNotPermittedForScenarios(
	COUNTEDSTRING Event
	);

ETWConsumer_AgentEventNotPermittedForTelemetry(
	COUNTEDSTRING Event
	);

ETWConsumer_Etl_ProcessTrace(
	INT32 ReturnCode,
	COUNTEDSTRING FilePath
	);

ETWConsumer_DeleteEtlFileWithoutProcessing(
	COUNTEDSTRING FilePath
	);

ETWConsumer_OpenOfflineETLFilesTrace(
	INT32 ReturnCode,
	COUNTEDSTRING FilePath
	);

ETWConsumer_DoEtlProcessing_NotAuthorizedToProcessEtlLogs(
	VOID
	);

ETWConsumer_SkippingRawEventMarkedToDisableUpload(
	COUNTEDSTRING EventName
	);

ETWConsumer_GetAggregatedSettingsFailed(
	COUNTEDSTRING EventName
	);

ETWConsumer_SkippingRawEventForAggregatedEvent(
	COUNTEDSTRING EventName
	);

ETWConsumer_EventRejectedForHavingAllKeywordBitsSet(
	COUNTEDSTRING EventName
	);

ETWConsumer_ShowingSampledOutEvent(
	COUNTEDSTRING FullEventName,
	COUNTEDSTRING GroupName,
	UINT64 Keyword,
	DOUBLE EffectiveSampleRate
	);

ETWConsumer_etwTriggerEventIsDevHealthMonEvent(
	UNICODESTRING isDevHealthMonEvent
	);

TestReentrancyMonitorThrottling(
	UINT64 PartA_PrivTags
	);

ETWConsumer_WatchdogEventReceived(
	VOID
	);

ETWConsumer_FailedToSwitchToShutdownTrace(
	INT32 HResult
	);

ETWConsumer_SwitchToShutdownTrace(
	VOID
	);

ETWConsumer_DroppingUnregisteredIKeyEvent(
	COUNTEDSTRING IKey,
	COUNTEDSTRING EventName
	);

ETWConsumer_SkippingShutdownLogger_SessionNotRunning(
	VOID
	);

ETWConsumer_SkippingShutdownLogger_NotAuthorized(
	VOID
	);

ETWConsumer_StopConsumer_PostTraceHandleReset(
	BOOLEAN IsSevilleConsumer
	);

ETWConsumer_OpenRealTimeTrace(
	BOOLEAN IsSevilleConsumer,
	INT32 ReturnCode
	);

ETWConsumer_StopConsumer_PreTraceHandleReset(
	BOOLEAN IsSevilleConsumer
	);

ETWConsumer_ProcessTrace(
	INT32 ReturnCode
	);

ETWConsumer_SkippingRealtimeSession_NotAuthorized(
	VOID
	);

EtwConsumer_ListenerThreadProc_Begin(
	VOID
	);

EtwTriggerDef_ProviderAndGroupIdConflict(
	GUID ConflictingProviderId
	);

DifferentialPrivacyManager_StoredParameters(
	DOUBLE DefaultEpsilon,
	DOUBLE DefaultPerturbationProbability,
	UINT64 DomainDistributionHashFunctionPrime
	);

DiagTrack_Rundown_DifferentialPrivacyManager(
	VOID
	);

DifferentialPrivacyManager_DomainDistributionDetails(
	COUNTEDSTRING EventName,
	COUNTEDANSISTRING OriginalValue,
	BINARY ValueKey,
	UINT64 HashValue,
	INT64 DiffpValue
	);

DiagTrack_Rundown_DifferentialPrivacyManager(
	VOID
	);

DifferentialPrivacyManager_NumericMeanDetails(
	COUNTEDSTRING EventName,
	UINT64 OriginalValue,
	UINT8 DiffpMeanBit,
	ANSISTRING HistogramType,
	UINT64 Bucket,
	UINT32 Histogram,
	UINT32 PerturbedHistogram,
	INT64 DiffpValue
	);

DifferentialPrivacyManager_CreateDomainDistributionMemoizationDataEntry(
	UINT64 HashPrime,
	DOUBLE Epsilon,
	UINT64 HashSeed,
	UINT64 HashValueReportingThreshold,
	DOUBLE RandomPercentage,
	DOUBLE ReportHashSeedProbability,
	BOOLEAN AlwaysReportHashSeed
	);

DifferentialPrivacyManager_DomainDistributionMemoizationData(
	COUNTEDSTRING EventName,
	UINT64 HashPrime,
	DOUBLE Epsilon,
	UINT64 HashSeed,
	UINT64 HashValueReportingThreshold,
	BOOLEAN AlwaysReportHashSeed
	);

DifferentialPrivacyManager_CreateNumericMeanMemoizationDataEntry(
	UINT64 MaxValue,
	DOUBLE Epsilon,
	UINT64 RandomBaseValue,
	DOUBLE Bit0RandomPercentage,
	DOUBLE Bit0ProbabilityThreshold,
	BOOLEAN Bit0RandomPercentageWithinThreshold,
	UINT8 MeanBit0,
	DOUBLE Bit1RandomPercentage,
	DOUBLE Bit1ProbabilityThreshold,
	BOOLEAN Bit1RandomPercentageWithinThreshold,
	UINT8 MeanBit1,
	UINT32 SeedHistogram,
	UINT32 SeedHistogramMask
	);

DifferentialPrivacyManager_NumericMeanMemoizationData(
	COUNTEDSTRING EventName,
	UINT64 MaxValue,
	DOUBLE Epsilon,
	UINT64 RandomBaseValue,
	UINT8 MeanBit0,
	UINT8 MeanBit1,
	UINT32 SeedHistogram,
	UINT32 SeedHistogramMask
	);

DifferentialPrivacyManager_DiffpResult(
	UNICODESTRING FieldName,
	ANSISTRING OriginalValue,
	INT64 DiffpValue
	);

EtwSession_SetBinaryTrackingInfo(
	UINT32 ErrorWin32
	);

EtwSession_EnumTraceGuidsEx_TraceGroupQueryInfoError(
	GUID GroupGuid,
	UINT32 Win32Error
	);

EtwSession_EnumTraceGuidsEx_TraceGuidQueryInfoError(
	GUID ProviderGuid,
	UINT32 Win32Error
	);

EtwSession_SetDisallowList(
	COUNTEDSTRING SessionName,
	UINT64 DisallowListLength,
	UINT32 ReturnCode
	);

EtwSession_ControlTrace(
	COUNTEDSTRING SessionName,
	UINT64 LoggerId,
	UINT32 ControlCode,
	UINT32 ReturnCodeWin32
	);

EtwSession_DisableProvider(
	COUNTEDSTRING SessionName,
	GUID Guid,
	BOOLEAN IsGroup,
	UINT32 Win32Error
	);

EtwSession_CaptureState(
	COUNTEDSTRING SessionName,
	GUID Provider,
	BOOL32 IsGroup,
	UINT64 Keywords,
	UINT8 Level,
	UINT32 EnableProperty,
	UINT32 Win32Error
	);

EtwSession_SetEventIdFilter(
	COUNTEDSTRING SessionName,
	GUID Provider,
	UINT8 Level,
	ANSISTRING FilterEventNames
	);

EtwSession_EnableProvider(
	COUNTEDSTRING SessionName,
	GUID Provider,
	BOOL32 IsGroup,
	UINT64 KeywordsBeforeIndividualEventRules,
	UINT64 FinalKeywords,
	UINT8 Level,
	UINT32 EnableProperty,
	UINT32 Win32Error
	);

EtwSession_FailedToRetrieveEventId_ForFiltering(
	COUNTEDSTRING SessionName,
	GUID Provider,
	UINT8 Level,
	ANSISTRING FilterEventNames
	);

EtwSession_InvalidEventName_ForEventIdFiltering(
	COUNTEDSTRING SessionName,
	GUID Provider,
	UINT8 Level,
	ANSISTRING FilterEventNames
	);

ETWConsumer_SkipEnableProviderGroup(
	COUNTEDSTRING SessionName,
	GUID GroupId
	);

EtwSession_SetEventNameFilter(
	COUNTEDSTRING SessionName,
	GUID Provider,
	UINT8 Level,
	UINT64 FilterKeywords,
	ANSISTRING FilterEventNames,
	BINARY FilterEventData
	);

ETWConsumer_AddToEventNameFilter(
	COUNTEDSTRING SessionName,
	ANSISTRING EventName,
	UINT64 EventKeywords,
	COUNTEDSTRING ProviderName
	);

ETWConsumer_SkipIndividualEventEnable(
	COUNTEDSTRING SessionName,
	ANSISTRING EventName,
	UINT64 EventKeywords,
	COUNTEDSTRING ProviderName,
	UINT64 ProviderKeywords
	);

EtwSession_ResumedExistingTrace(
	UNICODESTRING SessionName
	);

EtwSession_StopExistingTrace(
	COUNTEDSTRING SessionName
	);

EtwSession_StartTrace(
	COUNTEDSTRING SessionName,
	UINT32 ErrorWin32
	);

RegexRE2PrivacyGuardPattern_RegexString(
	UNICODESTRING PatternType,
	BOOLEAN Enabled,
	ANSISTRING RegexString
	);

IpAddressPrivacyGuardPattern_GetIpAddresses(
	VOID
	);

IpAddressPrivacyGuardPattern_GetIpAddresses(
	VOID
	);

TenantManager_UnregisterTenant(
	COUNTEDSTRING IKey
	);

TenantManager_RegisterTenant(
	COUNTEDSTRING IKey,
	UINT32 DiskSizeInBytes,
	UINT32 DailyUploadQuotaInBytes
	);

DevHealthMonTenant_DeviceHealthMonitoringEnabledMdm(
	INT32 DeviceHealthMonitoringMdmValue
	);

DevHealthMonTenant_NotifyDevHealthMonStateChanged(
	BOOLEAN isEnabled
	);

DiagTrack_Rundown_DevHealthMonTenant(
	VOID
	);

DiagTrack_Rundown_DevHealthMonTenant_Settings(
	UNICODESTRING Event
	);

DiagTrack_Rundown_DevHealthMonTenant(
	VOID
	);

Tenant_EnabledAndHasValidHeartBeatPointer(
	VOID
	);

SevilleTenant_EnableStart(
	VOID
	);

SevilleTenant_EnableStop(
	VOID
	);

TelemetryAssert_ExecuteEscalationError(
	COUNTEDSTRING ScenarioStableId,
	GUID ScenarioInstanceId,
	UINT32 WaitOrTimeoutErrorCode,
	HRESULT HRESULT
	);

TelemetryAssert_ProcessDumpAttempt(
	COUNTEDSTRING ScenarioStableId,
	GUID ScenarioInstanceId,
	HRESULT HRESULT
	);

TelemetryAssert_DisabledByTesthook(
	VOID
	);

ApiServer_LuaTokenType(
	UINT32 luatype
	);

ApiServer_UifIsNotCaller(
	UNICODESTRING SID
	);

ApiServer_FoundTokenAndSidForRpcImpersonatedUser(
	UNICODESTRING Sid
	);

ApiServer_UifIsCaller(
	UNICODESTRING SID
	);

ApiServer_GetAppSidFailed(
	VOID
	);

ApiServer_RpcInterfaceRegistered(
	VOID
	);

LatencyData_FailedToOpenLatencyKey(
	VOID
	);

HeartBeat_InputEndpointErrorString(
	UNICODESTRING ErrorBucket
	);

HeartBeat_IncreaseVortexResponseCodeFailure(
	UINT32 HttpStatusCode
	);

HeartBeat_IncreaseVortexHttpNetworkFailures(
	INT32 NetworkResult
	);

HeartBeat_GenerateFlags(
	UINT32 HeartbeatFlags
	);

HeartBeat_StampLastAttemptedFireTime(
	UINT64 lastAttemptedFireTime
	);

HeartBeat_GetNextFireTime(
	UINT64 lastAttemptToFireTime,
	UINT64 nextFireTime
	);

Heartbeat_FailedToOpenHeartbeatKey(
	VOID
	);

DiagTrack_Rundown_UsageAnalyzer_TotalPrivacyPatternTct(
	UNICODESTRING PatternType,
	UINT64 TotalTct
	);

DiagTrack_Rundown_UsageAnalyzer_EtwEventProcessingStats(
	UINT64 TotalEventsDecoded
	);

UsageAnalyzer_ScenarioReport(
	VOID
	);

UsageAnalyzer_AsimovReportEntry(
	STRING Key,
	ANSISTRING ProviderName,
	UINT32 Features,
	UINT32 EventCount,
	UINT64 TotalBytes,
	ANSISTRING TopEvent1Name,
	UINT32 TopEvent1Count,
	ANSISTRING TopEvent2Name,
	UINT32 TopEvent2Count,
	UINT32 NumProcessesWithKey,
	UINT32 NumProcessesWithProvider,
	UINT64 ProviderEnableTimeScreenOn,
	UINT64 ProviderEnableTimeScreenOff
	);

UsageAnalyzer_AsimovReport(
	UINT32 ReportLengthSec,
	UINT32 ReportScreenOnLengthSec,
	UINT32 ReportScreenOffLengthSec
	);

UsageAnalyzer_DerivedEventStats(
	UINT64 TimeCoveredSec,
	UINT64 UtcProcessCy,
	UINT16 MaxLoadedScenarioCount,
	UINT64 EventListeningCy,
	UINT64 MatchingCy,
	UINT64 EventGenerationCy,
	UINT64 MemoryEstimationCy,
	UINT64 EstimatedMaxMemoryBytes,
	UINT32 DerivedEventsGenerated,
	UINT32 ScenarioDefCacheMissCount,
	UINT16 ScenarioStartCount,
	UINT16 ScenarioCompleteCount,
	UINT16 ScenarioFailedCount,
	UINT16 ScenarioCancelCount,
	UINT16 ScenarioTimeoutCount,
	UINT16 ScenarioAgeOutCount,
	UINT16 ScenarioThrottleCount,
	UINT64 MaxInflightScenarioCount,
	UINT32 UniqueTriggerCandidates,
	UINT32 SharedTriggerCandidates,
	UINT16 TriggerCandidatesScreenOff,
	UINT32 TriggerCandidateBlame,
	UINT16 MatchedTriggerCount,
	UINT16 UnmatchedTriggerCount,
	UINT16 StateModelTransitionCount,
	UINT16 StateModelTransitionCountLowPower,
	UINT16 UniqueUploadedTriggerCount,
	UINT16 SharedUploadedTriggerCount,
	FLOAT UploadedTriggerBlameCount
	);

UsageAnalyzer_ScenarioReportEntry_2(
	GUID ScenarioId,
	UNICODESTRING ScenarioName,
	UINT64 MatchingKCy,
	UINT64 EscalationKCy,
	UINT32 EscalationDiskWriteKB,
	UINT32 UniqueTriggerCandidateCount,
	UINT32 SharedTriggerCandidateCount,
	FLOAT TriggerCandidateBlame,
	UINT16 UniqueUploadedTriggerCount,
	UINT16 SharedUploadedTriggerCount,
	FLOAT UploadedTriggerBlame,
	UINT16 TriggerCandidateCountScreenOff,
	UINT16 StateModelTransitionCount,
	UINT16 GeneratedSyntheticCount,
	UINT16 ScenarioStarted,
	UINT16 ScenarioCompletions,
	UINT16 ScenarioFailures,
	UINT16 EscalationSuccesses,
	UINT16 EscalationFailures,
	UINT16 ScenarioThrottled
	);

UsageAnalyzer_ScenarioReport(
	UINT32 ReportLengthSec,
	UINT32 CurrentLoadedScenarioCount,
	UINT32 SeenScenarioCount,
	UINT32 ConsumerDroppedEventCount,
	UINT32 TotalEventCount,
	UINT32 WakingEventCount,
	UINT64 SpuriousEventCount,
	UINT64 SyntheticTriggerCount,
	UINT64 DefCacheMissCount
	);

UsageAnalyzer_AsimovReport(
	VOID
	);

UsageAnalyzer_AsimovReportThrottleOccurrence(
	NOPRINT Key,
	ANSISTRING ProviderName,
	UINT32 Count
	);

UsageAnalyzer_ProcessRecord_ProviderInfo(
	STRING Process,
	UINT32 PID,
	UINT64 Key,
	STRING Key,
	ANSISTRING ProviderName,
	UINT32 Features,
	UINT32 EventCount
	);

UsageAnalyzer_ProcessRecord(
	STRING Process,
	UINT32 PID,
	UINT64 Key,
	UINT64 TotalProcessSecondsScreenOn,
	UINT64 TotalProcessSecondsScreenOff
	);

DiagTrack_Rundown_UsageAnalyzer(
	VOID
	);

DiagTrack_Rundown_UsageAnalyzer(
	VOID
	);

EventTranscript_MaxWorkerThreadFailureCountExceeded(
	VOID
	);

EventTranscript_SuccessfullyOpenedReadConnection(
	VOID
	);

EventTranscript_StoreUsageExceededTheLimit(
	UINT64 StoreUsageBytes
	);

EventTranscript_SucceededToTrimStore(
	VOID
	);

EventTranscript_FailedToTrimStore(
	VOID
	);

EventTranscript_FailedToDeleteStore(
	VOID
	);

EventTranscript_EndTransactionNotReadyOrConnectedStandby(
	VOID
	);

EventTranscript_EndTransactionCommitSkipped(
	VOID
	);

EventTranscript_EndTransactionBegin(
	BOOLEAN ForceCommit,
	BOOLEAN TranscriptStatsRequested,
	BOOLEAN CommitOnElapsedTime,
	UINT32 NumEventsInTransaction,
	UINT32 MaxEventsPerTransaction,
	BOOLEAN TransactionStarted,
	UINT64 CurrMillis,
	UINT64 LastCommitTimeMillis,
	UINT32 PeriodicCommitTimeSec
	);

EventTranscript_EndTransactionCommitSucceeded(
	VOID
	);

EventTranscript_OldStoreDetected(
	UINT32 ActualStoreVersion,
	UINT32 RequiredStoreVersion
	);

EventTranscript_UnexpectedJournalMode(
	COUNTEDANSISTRING ActualJournalMode
	);

EventTranscript_UnexpectedJournalSizeLimit(
	INT32 ActualSizeLimit
	);

EventTranscript_SucceededToVacuumStore(
	UINT64 DbFileSizeBytesBeforeVacuum,
	UINT64 MaxStoreUsageBytes
	);

EventTranscript_FailedToVacuumStore(
	VOID
	);

EventTranscript_DeletedOldStore(
	VOID
	);

EventTranscript_Enabled(
	UINT32 MaxEventsPerCommit,
	UINT32 PeriodicCommitTimeSec
	);

EventTranscript_AllowedProducersUpdated(
	VOID
	);

EventTranscript_StoreAlreadyOpened(
	VOID
	);

EventTranscript_InsertedEventTag(
	UINT32 EventNameHash,
	UINT32 TagGroupAndRank
	);

EventTranscript_UpdatingAllowedProducers(
	VOID
	);

EventTranscript_NoAllowedProducerChangesDetected(
	VOID
	);

EventTranscript_InsertedTagDescription(
	UINT32 TagGroupAndRank,
	ANSISTRING TagLocale,
	COUNTEDANSISTRING TagName,
	COUNTEDANSISTRING TagDescription
	);

EventTranscript_FailedToInsertEventTag(
	UINT32 EventNameHash,
	UINT32 TagGroupAndRank
	);

EventTranscript_FailedToInsertTagDescription(
	UINT32 TagGroupAndRank,
	ANSISTRING TagLocale,
	COUNTEDANSISTRING TagName,
	COUNTEDANSISTRING TagDescription
	);

EventTranscript_DoPersistInCodePrivacyTagsSucceeded(
	VOID
	);

EventTranscript_DoPersistCategory(
	VOID
	);

EventTranscript_DoPersistEventSucceeded(
	UINT32 NumEventsInTransaction,
	ANSISTRING EventPayload
	);

EventTranscript_DoPersistInCodePrivacyTags(
	VOID
	);

EventTranscript_DoPersistInCodePrivacyTag(
	UINT32 inCodeTag
	);

EventTranscript_DoPersistCategorySucceeded(
	VOID
	);

EventTranscript_DoPersistEventBegin(
	VOID
	);

EventTranscript_WorkerThreadIsShuttingDown(
	VOID
	);

EventTranscript_CantPauseUnpauseShuttingDown(
	VOID
	);

EventTranscript_ParseTagSetting(
	COUNTEDSTRING Prefix,
	ANSISTRING LocaleName,
	UINT32 TagGroupAndRank
	);

EventTranscript_EventPersistEnqueued(
	COUNTEDSTRING FullEventName,
	COUNTEDSTRING SID
	);

EventTranscript_WorkerThreadShutdownTimedOut(
	VOID
	);

ConnectivityHeartBeat_FailedToOpenHeartbeatKey(
	VOID
	);

OsEvents_TimerCallback_Exception(
	VOID
	);

PrivacyEvents_PersonalizationSettingsHandlerCreation(
	COUNTEDSTRING Sid
	);

PrivacyEvents_PersonalizationSettingsCheckMiss(
	COUNTEDSTRING RequestedUser,
	UINT32 PersonalizationLevel
	);

PrivacyEvents_UserPersonalizationSettingsChanged(
	UINT32 PersonalizationLevel,
	BOOLEAN PersonalizationAllowed
	);

Utils_PersonalizationSettingsFromUser(
	UINT32 PersonalizationLevel,
	BOOLEAN isRegionPolicyApplicable
	);

Utils_PersonalizationSettingsFromUser(
	UINT32 PersonalizationLevel
	);

PrivacyEvents_UserPersonalizationPolicyChanged(
	BOOLEAN IsPersonalizationAllowedByPolicy
	);

Utils_PersonalizationSettingsGroupPolicy(
	BOOLEAN PersonalizationAllowed
	);

Utils_PersonalizationSettingsMdm(
	INT32 PersonalizationAllowed
	);

Utils_PersonalizationSettingsMdmSet(
	INT32 Configured
	);

PrivacyEvents_MdmExperiencePolicyChange(
	UNICODESTRING Sid,
	UINT32 Session
	);

PrivacyEvents_MachinePersonalizationSettingsChanged(
	BOOLEAN PersonalizationEnabled
	);

Utils_PersonalizationSettingsFromMachine(
	BOOLEAN PersonalizationEnabled
	);

Utils_PersonalizationSettingsFromMachine(
	INT32 PersonalizationEnabled,
	BOOLEAN RegionPolicy
	);

SentinelMonitor_FailedToOpenEventMonitorKey(
	VOID
	);

Realtime_0(
	UINT32 SentinelSn
	);

Normal_0(
	UINT32 SentinelSn
	);

CostDeferred_0(
	UINT32 SentinelSn
	);

CriticalPersistence_0(
	UINT32 SentinelSn
	);

EventMonitor_FailedToOpenEventMonitorKey(
	VOID
	);

SqliteEventStore_HandleEventStoreFull(
	UINT32 EventStoreBytes
	);

EventStore_FlushingPreCompressBuffers(
	INT8 Latency
	);

SqliteEventStore_BeginReset(
	VOID
	);

SqliteEventStore_FailedToShrinkPagesFurther(
	INT32 HRESULT
	);

Sqlite_SetLockingModeExclusive(
	ANSISTRING ErrorMessage
	);

EventStore_ClearAllEvents(
	VOID
	);

SqliteTable_SuccessfullyWroteEvent(
	UINT64 NumBytes,
	UINT32 NumEvents,
	INT32 OverwroteLowerPriorityEvent,
	UINT8 StorageBufferType
	);

SqliteTable_TooFullToCommitPreCompressBuffer(
	UINT64 NumBytes,
	UINT32 NumEvents,
	UINT8 StorageBufferType
	);

SqliteTable_UnexpectedErrorDuringTryInsert(
	INT32 HRESULT
	);

SqliteTable_TooFullToFlushPreCompressBuffer(
	UINT64 NumBytes,
	UINT32 NumEvents,
	UINT8 StorageBufferType
	);

EventStore_CommittedPreCompressBuffer(
	UINT64 NumBytes,
	UINT32 NumEvents,
	UINT8 StorageBufferType
	);

SqliteTable_InvalidSchemaReadResult(
	ANSISTRING Type,
	ANSISTRING Name,
	ANSISTRING Tbl_Name,
	UINT32 Rootpage,
	ANSISTRING Sql
	);

SqliteTable_EventAddedSuccessfully(
	ANSISTRING Payload
	);

XMLParser_DebuggingInfo(
	UNICODESTRING InfoString,
	INT32 HRESULT
	);

XMLParser_SessionEnd(
	UINT64 SessionId
	);

XMLParser_SessionBegin(
	UINT64 SessionId
	);

EventRateMonitor_ProducerThrottled_Event_Rate(
	GUID ProviderId,
	UNICODESTRING ProviderName,
	UINT64 Hit,
	UNICODESTRING EstTopEvent1Name,
	UINT32 EstTopEvent1Count,
	UNICODESTRING EstTopEvent2Name,
	UINT32 EstTopEvent2Count,
	UINT32 EstSeenCount,
	UINT32 EventRateThreshold,
	UINT32 EventPerProviderThreshold,
	UNICODESTRING IKey
	);

EventRateMonitor_EventRateThrottlingDisabled(
	VOID
	);

EventRateMonitor_SwitchTimeStampMode(
	BOOLEAN PreviousUseEventTimeStamps,
	BOOLEAN CurrentUseTimeStamps
	);

TriggerBufferMonitor_SkipThrottling_NotEnoughTriggersFromProducer(
	GUID ProducerId,
	UINT64 ProducerHitCount,
	UINT64 TriggerBufferMaxSize
	);

TriggerBufferMonitor_SkipThrottling_NoProducerEnabled(
	VOID
	);

TriggerBufferMonitor_SkipThrottling_ThrottlingDisabled(
	VOID
	);

EventRateMonitor_ProducerThrottled_At_TriggerBuffer(
	UNICODESTRING ProviderId,
	UNICODESTRING ProviderName,
	UINT32 DataType,
	UINT64 Hit,
	UNICODESTRING EstTopEvent1Name,
	UINT32 EstTopEvent1Count,
	UNICODESTRING EstTopEvent2Name,
	UINT32 EstTopEvent2Count,
	UINT32 EstSeenCount,
	UINT64 Threshold,
	UINT32 BufferSize,
	UNICODESTRING IKey
	);

GetFileActionDef_PathNotApproved(
	COUNTEDSTRING FilePath,
	COUNTEDSTRING ExpandedFilePath,
	GUID ScenarioId,
	GUID ScenarioInstanceId,
	INT32 ErrorCode
	);

GetFileActionDef_ReplaceTempPath(
	UNICODESTRING OriginalPath,
	UNICODESTRING ModifiedPath
	);

StartTimeTravelDebuggingAction_CommandLine(
	UNICODESTRING CommandLine
	);

StartTimeTravelDebuggingAction_SlotTaken(
	GUID OwningScenarioId
	);

StartTimeTravelDebuggingAction_TargetProcessId(
	UNICODESTRING ProcessIdString,
	UINT32 ProcessId
	);

GetWNFStateAction_TooManyTypes(
	VOID
	);

GetWNFStateAction_NotEnoughTypes(
	VOID
	);

GetWNFStateAction_FailedToQueryWNF(
	INT32 NtStatus,
	INT32 QueryNumber
	);

RadarAction_CommandLine(
	UNICODESTRING CommandLine
	);

RadarAction_FailedIsWow64Process(
	INT32 HRESULT
	);

SetRegKeyAction_SetRegistryKey(
	UNICODESTRING KeyName,
	UNICODESTRING ValueName,
	UNICODESTRING ValueType,
	UNICODESTRING Value,
	BOOLEAN IsVolatile,
	INT32 HRESULT
	);

StartImpersonationAction_Execute(
	COUNTEDSTRING SecurityIdentifier
	);

SoftLanding_CampaignInformation(
	UNICODESTRING campaignId,
	UINT32 ruleType
	);

GetKernelDumpAction_DumpFailed(
	INT32 NtStatus
	);

GetKernelDumpAction_TimeIntervalCheckUnderflow(
	UINT64 FiletimeInterval
	);

GetKernelDumpAction_MaximumKernelDumpLimitReached(
	UINT64 TimeFromFirstDump
	);

GetKernelDumpAction_DumpSucceeded(
	INT32 NtStatus
	);

Utils_FileTimeToPrecise8601Failed(
	UINT64 FileTime,
	UINT16 Year,
	UINT16 Month,
	UINT16 Day,
	UINT16 Hour,
	UINT16 Minute,
	UINT16 Second,
	UINT32 SecondDecimal,
	UINT32 LocaleId
	);

AzureProfiler_BreakingFuse(
	UNICODESTRING Name
	);

RunExeWithArgsAction_ProcessExitCode(
	UNICODESTRING ExpandedExeName,
	UNICODESTRING FinalCommandLine,
	UINT32 ExitCode
	);

RunExeWithArgsAction_ReplacedTempPath(
	UNICODESTRING OriginalExpandedCommandLine,
	UNICODESTRING FinalExpandedCommandLine
	);

RunExeWithArgsAction_SkippingImpersonation(
	VOID
	);

TdhFacade_ProviderUnloaded(
	INT32 HR,
	GUID ProviderID,
	UINT32 Size,
	UINT32 Idle
	);

ETWConsumer_ModernAppProviderLoaded(
	UNICODESTRING ProviderPath
	);

TdhFacade_EventSourceProviderLoadedError(
	GUID ProviderID,
	INT32 ReturnCode
	);

TdhFacade_EventSourceProviderLoaded(
	GUID ProviderID
	);

